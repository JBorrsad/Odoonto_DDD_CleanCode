---
description: 
globs: 
alwaysApply: false
---
# Ejemplos de Componentes por Capa

> Este es un documento MDC (Markdown Cursor) de ejemplo que muestra cómo Cursor interpreta la estructura para proporcionar ayuda contextual.

## Entidades de Dominio

```cs
public class Product : Entity
{
    public string Name { get; private set; }
    public decimal Price { get; private set; }
    public ProductStatus Status { get; private set; }

    private Product(Guid id) : base(id)
    {
        Name = null;
        Price = 0;
        Status = ProductStatus.Draft;
    }

    public static Product Create(Guid id)
    {
        if (id.Equals(Guid.Empty))
        {
            throw new InvalidValueException("Product id can't be empty.");
        }

        Product product = new Product(id);
        product.UpdateEditDate();
        return product;
    }

    public void SetName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            throw new InvalidValueException("Product name can't be null/empty.");
        }

        Name = name;
        UpdateEditDate();
    }

    public void SetPrice(decimal price)
    {
        if (price < 0)
        {
            throw new InvalidValueException("Product price can't be negative.");
        }

        Price = price;
        UpdateEditDate();
    }

    public void Publish()
    {
        if (string.IsNullOrWhiteSpace(Name))
        {
            throw new WrongOperationException("Cannot publish product without name.");
        }

        if (Price <= 0)
        {
            throw new WrongOperationException("Cannot publish product with invalid price.");
        }

        Status = ProductStatus.Published;
        UpdateEditDate();
    }
}
```

## Repositorio Firebase

```cs
public class ProductRepository : IProductRepository
{
    private readonly FirebaseDbContext _firebaseContext;
    private readonly string _collectionName = "products";

    public ProductRepository(FirebaseDbContext firebaseContext)
    {
        _firebaseContext = firebaseContext;
    }

    public async Task<Product> GetById(Guid id)
    {
        DocumentSnapshot document = await _firebaseContext.FirestoreDb
            .Collection(_collectionName)
            .Document(id.ToString())
            .GetSnapshotAsync();

        if (!document.Exists)
        {
            return null;
        }

        var data = document.ConvertTo<ProductDocument>();
        return MapToDomainEntity(data);
    }

    public async Task Create(Product entity)
    {
        var document = MapToDocument(entity);
        
        await _firebaseContext.FirestoreDb
            .Collection(_collectionName)
            .Document(entity.Id.ToString())
            .SetAsync(document);
    }

    private ProductDocument MapToDocument(Product entity)
    {
        return new ProductDocument
        {
            Id = entity.Id.ToString(),
            Name = entity.Name,
            Price = entity.Price,
            Status = entity.Status.ToString(),
            CreationDate = entity.CreationDate,
            EditDate = entity.EditDate
        };
    }

    private Product MapToDomainEntity(ProductDocument doc)
    {
        var product = Product.Create(Guid.Parse(doc.Id));
        product.SetName(doc.Name);
        product.SetPrice(doc.Price);
        
        if (Enum.TryParse<ProductStatus>(doc.Status, out var status) && 
            status == ProductStatus.Published)
        {
            product.Publish();
        }
        
        return product;
    }

    private class ProductDocument
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public string Status { get; set; }
        public DateTime CreationDate { get; set; }
        public DateTime EditDate { get; set; }
    }
}
```

## Servicio de Aplicación

```cs
public class ProductAppService : IProductAppService
{
    private readonly IProductRepository _productRepository;
    private readonly ICategoryRepository _categoryRepository;
    private readonly IMapper _mapper;

    public ProductAppService(
        IProductRepository productRepository,
        ICategoryRepository categoryRepository,
        IMapper mapper)
    {
        _productRepository = productRepository;
        _categoryRepository = categoryRepository;
        _mapper = mapper;
    }

    public async Task<ProductReadDto> GetById(Guid id)
    {
        Product product = await _productRepository.GetByIdOrThrow(id);
        return _mapper.Map<Product, ProductReadDto>(product);
    }

    public async Task Create(ProductCreateDto dto)
    {
        if (dto == null)
        {
            throw new InvalidValueException("Product data is required.");
        }

        // Crear entidad principal
        Product product = Product.Create(dto.Id ?? Guid.NewGuid());
        product.SetName(dto.Name);
        product.SetPrice(dto.Price);

        // Verificar categoría si es necesario
        if (dto.CategoryId.HasValue)
        {
            var category = await _categoryRepository.GetByIdOrThrow(dto.CategoryId.Value);
            // Lógica adicional con la categoría...
        }

        // Persistir
        await _productRepository.Create(product);
    }

    // Más métodos...
}
```

## Componente React (Vista)

```tsx
import React, { useState } from 'react';
import { useProductPresenter } from '../../presenters/products/useProductPresenter';
import { ProductCreateModel } from '../../models/products/Product.model';

export const ProductList: React.FC = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [productName, setProductName] = useState('');
  const [productPrice, setProductPrice] = useState('');

  const {
    products,
    loading,
    error,
    createProduct,
    deleteProduct
  } = useProductPresenter();

  const handleCreateProduct = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const price = parseFloat(productPrice);
    if (isNaN(price) || price <= 0) {
      alert('El precio debe ser un número válido mayor a cero');
      return;
    }
    
    const newProduct: ProductCreateModel = {
      name: productName,
      price: price
    };
    
    try {
      await createProduct(newProduct);
      setIsModalOpen(false);
      setProductName('');
      setProductPrice('');
    } catch (err) {
      console.error('Error al crear producto:', err);
    }
  };

  return (
    <div className="container">
      <h1>Productos</h1>
      
      {error && <div className="alert alert-danger">{error}</div>}
      
      <button 
        className="btn btn-primary mb-3" 
        onClick={() => setIsModalOpen(true)}
        disabled={loading}
      >
        Nuevo Producto
      </button>
      
      {loading ? (
        <div>Cargando...</div>
      ) : (
        <table className="table">
          <thead>
            <tr>
              <th>Nombre</th>
              <th>Precio</th>
              <th>Estado</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {products.map(product => (
              <tr key={product.id}>
                <td>{product.name}</td>
                <td>${product.price.toFixed(2)}</td>
                <td>{product.status}</td>
                <td>
                  <button 
                    className="btn btn-sm btn-danger"
                    onClick={() => deleteProduct(product.id)}
                    disabled={loading}
                  >
                    Eliminar
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
      
      {isModalOpen && (
        <div className="modal d-block" style={{backgroundColor: 'rgba(0,0,0,0.5)'}}>
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Nuevo Producto</h5>
                <button 
                  type="button" 
                  className="close" 
                  onClick={() => setIsModalOpen(false)}
                >
                  <span>&times;</span>
                </button>
              </div>
              <form onSubmit={handleCreateProduct}>
                <div className="modal-body">
                  <div className="form-group">
                    <label>Nombre</label>
                    <input
                      type="text"
                      className="form-control"
                      value={productName}
                      onChange={e => setProductName(e.target.value)}
                      required
                    />
                  </div>
                  <div className="form-group">
                    <label>Precio</label>
                    <input
                      type="number"
                      step="0.01"
                      min="0.01"
                      className="form-control"
                      value={productPrice}
                      onChange={e => setProductPrice(e.target.value)}
                      required
                    />
                  </div>
                </div>
                <div className="modal-footer">
                  <button 
                    type="button" 
                    className="btn btn-secondary"
                    onClick={() => setIsModalOpen(false)}
                  >
                    Cancelar
                  </button>
                  <button 
                    type="submit" 
                    className="btn btn-primary"
                    disabled={loading}
                  >
                    Crear
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

