{
  "name": "dto",
  "description": "Reglas y ejemplos para crear DTOs siguiendo DDD",
  "patterns": [
    "crear? DTO(?:s)?",
    "implementar? DTO(?:s)?",
    "Data Transfer Object"
  ],
  "references": [
    {
      "path": "src/DDD_Ejemplos_Codigo/5_Application_DTO.cs",
      "description": "Ejemplo de DTOs"
    }
  ],
  "templates": [
    {
      "name": "DTOs para CRUD",
      "code": "namespace TuProyecto.Application.DTO.<Modulo>;\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\npublic class <Entidad>CreateDto\n{\n    public Guid? Id { get; set; }\n    \n    [Required]\n    [StringLength(100, MinimumLength = 3)]\n    public string Name { get; set; }\n    \n    // Otras propiedades para crear\n}\n\npublic class <Entidad>UpdateDto\n{\n    [Required]\n    [StringLength(100, MinimumLength = 3)]\n    public string Name { get; set; }\n    \n    // Otras propiedades para actualizar\n}\n\npublic class <Entidad>ReadDto\n{\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    public DateTime CreationDate { get; set; }\n    public DateTime EditDate { get; set; }\n    \n    // Propiedades de navegaci√≥n\n    public IEnumerable<RelacionadoDto> Relacionados { get; set; }\n}\n\npublic class <Entidad>QueryDto\n{\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    public DateTime EditDate { get; set; }\n    public int ItemsCount { get; set; } // Ejemplo de propiedad derivada\n}"
    }
  ]
} 