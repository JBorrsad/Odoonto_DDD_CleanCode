{
  "name": "domain_repository_interface",
  "description": "Reglas para interfaces de repositorio en Domain Layer",
  "patterns": [
    ".*I[A-Z].*Repository\\.cs$",
    ".*/Domain/.*/Repositories/I.+\\.cs$",
    ".*IRepository.*\\.cs$"
  ],
  "keywords": [
    "repositorio",
    "repository interface",
    "interfaz de repositorio"
  ],
  "documentation": "../docs/domain_repository_interface.mdc",
  "example_file": "../DDD_Ejemplos_Codigo/2_Domain_Repository_Interface.cs",
  "templates": [
    {
      "name": "Interfaz de Repositorio b\u00e1sica",
      "description": "Plantilla para una interfaz de repositorio de dominio",
      "code": "namespace TuProyecto.Domain.Repositories.<Modulo>;\n\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing TuProyecto.Domain.Models.<Modulo>;\n\npublic interface I<Entidad>Repository\n{\n    Task<IEnumerable<<Entidad>>> GetAllAsync();\n    Task<<Entidad>> GetByIdAsync(Guid id);\n    Task<bool> ExistsAsync(Guid id);\n    Task<Guid> SaveAsync(<Entidad> entity);\n    Task DeleteAsync(Guid id);\n}"
    },
    {
      "name": "Interfaz de Repositorio con métodos adicionales",
      "description": "Plantilla para una interfaz de repositorio de dominio con métodos adicionales",
      "code": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Odoonto.Domain.Core.Repositories;\nusing Odoonto.Domain.Models.{{entity_name_plural}};\n\nnamespace {{namespace}}\n{\n    /// <summary>\n    /// Interfaz de repositorio para la entidad {{entity_name}}\n    /// </summary>\n    public interface I{{entity_name}}Repository : IRepository<{{entity_name}}>\n    {\n        /// <summary>\n        /// Obtiene una entidad por su identificador\n        /// </summary>\n        /// <param name=\"id\">Identificador único de la entidad</param>\n        /// <returns>La entidad encontrada o null si no existe</returns>\n        Task<{{entity_name}}> GetById(Guid id);\n        \n        /// <summary>\n        /// Obtiene una entidad por su identificador o lanza excepción si no existe\n        /// </summary>\n        /// <param name=\"id\">Identificador único de la entidad</param>\n        /// <returns>La entidad encontrada</returns>\n        /// <exception cref=\"ValueNotFoundException\">Si la entidad no existe</exception>\n        Task<{{entity_name}}> GetByIdOrThrow(Guid id);\n        \n        /// <summary>\n        /// Obtiene todas las entidades\n        /// </summary>\n        Task<IEnumerable<{{entity_name}}>> GetAll();\n        \n        /// <summary>\n        /// Añade una nueva entidad\n        /// </summary>\n        /// <param name=\"entity\">Entidad a añadir</param>\n        Task Add({{entity_name}} entity);\n        \n        /// <summary>\n        /// Actualiza una entidad existente\n        /// </summary>\n        /// <param name=\"entity\">Entidad con cambios</param>\n        Task Update({{entity_name}} entity);\n        \n        /// <summary>\n        /// Elimina una entidad\n        /// </summary>\n        /// <param name=\"entity\">Entidad a eliminar</param>\n        Task Delete({{entity_name}} entity);\n        \n        /// <summary>\n        /// Elimina una entidad por su identificador\n        /// </summary>\n        /// <param name=\"id\">Identificador de la entidad a eliminar</param>\n        Task DeleteById(Guid id);\n        \n        {{additional_methods}}\n    }\n}"
    }
  ],
  "category": "template",
  "doc": "../../docs/DDD_Core_Guide.md"
}