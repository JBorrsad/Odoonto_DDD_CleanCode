{
  "id": "DDD-tpl-domain_core_entity",
  "description": "Plantilla para clases base de entidades en Domain.Core",
  "placeholders": [
    {"name": "namespace", "description": "Namespace completo para la clase"},
    {"name": "class_name", "description": "Nombre de la clase base"},
    {"name": "properties", "description": "Propiedades comunes a todas las entidades", "multiline": true},
    {"name": "methods", "description": "Métodos comunes a todas las entidades", "multiline": true}
  ],
  "template": "using System;\n\nnamespace {{namespace}}\n{\n    /// <summary>\n    /// Clase base para todas las entidades del dominio.\n    /// Proporciona comportamiento común y garantiza consistencia.\n    /// </summary>\n    public abstract class {{class_name}}\n    {\n        // Identificador único de la entidad\n        public Guid Id { get; private set; }\n        \n        // Propiedades para auditoría y seguimiento\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n        \n        {{properties}}\n        \n        // Constructor protegido - solo accesible para clases derivadas\n        protected {{class_name}}(Guid id)\n        {\n            if (id == Guid.Empty)\n            {\n                throw new InvalidValueException(\"El identificador no puede estar vacío.\");\n            }\n            \n            Id = id;\n            CreatedAt = DateTime.UtcNow;\n            UpdatedAt = CreatedAt;\n        }\n        \n        // Método para actualizar la fecha de edición\n        protected void UpdateEditDate()\n        {\n            UpdatedAt = DateTime.UtcNow;\n        }\n        \n        {{methods}}\n        \n        // Método para verificar igualdad basada en identidad\n        public override bool Equals(object obj)\n        {\n            var other = obj as {{class_name}};\n            if (other is null) return false;\n            if (ReferenceEquals(this, other)) return true;\n            return Id.Equals(other.Id);\n        }\n        \n        // Sobreescritura de GetHashCode basada en Id\n        public override int GetHashCode()\n        {\n            return Id.GetHashCode();\n        }\n        \n        // Operadores de igualdad\n        public static bool operator ==({{class_name}} left, {{class_name}} right)\n        {\n            if (left is null) return right is null;\n            return left.Equals(right);\n        }\n        \n        public static bool operator !=({{class_name}} left, {{class_name}} right) => !(left == right);\n    }\n}",
  "filePattern": "src/Domain/Odoonto.Domain.Core/Models/{{class_name}}.cs"
}