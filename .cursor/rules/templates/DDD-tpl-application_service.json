{
  "name": "application_service",
  "description": "Reglas para servicios de aplicaci\u00f3n (Application Services)",
  "patterns": [
    ".*AppService\\.cs$",
    ".*ApplicationService\\.cs$",
    ".*/Application/.*/Services/.+\\.cs$",
    ".*IAppService\\.cs$"
  ],
  "keywords": [
    "servicio de aplicaci\u00f3n",
    "application service",
    "app service",
    "caso de uso"
  ],
  "documentation": "../docs/application_service.mdc",
  "example_file": "../DDD_Ejemplos_Codigo/7_Application_Service_Implementation.cs",
  "templates": [
    {
      "name": "Implementaci\u00f3n de Servicio de Aplicaci\u00f3n",
      "description": "Plantilla para un servicio de aplicaci\u00f3n que implementa CRUD",
      "code": "namespace TuProyecto.Application.Services.<Modulo>;\n\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing AutoMapper;\nusing TuProyecto.Application.DTO.<Modulo>;\nusing TuProyecto.Domain.Models.<Modulo>;\nusing TuProyecto.Domain.Repositories.<Modulo>;\nusing Odoonto.Domain.Core.Models.Exceptions;\nusing Odoonto.Application.DTOs.<Modulo_plural>;\nusing Odoonto.Application.Interfaces.<Modulo_plural>;\n\npublic class <Entidad>AppService : I<Entidad>AppService\n{\n    private readonly I<Entidad>Repository _repository;\n    private readonly IMapper _mapper;\n\n    public <Entidad>AppService(I<Entidad>Repository repository, IMapper mapper)\n    {\n        _repository = repository;\n        _mapper = mapper;\n    }\n\n    public async Task<IEnumerable<<Entidad>QueryDto>> GetAllAsync()\n    {\n        var entities = await _repository.GetAllAsync();\n        return _mapper.Map<IEnumerable<<Entidad>QueryDto>>(entities);\n    }\n\n    public async Task<<Entidad>ReadDto> GetByIdAsync(Guid id)\n    {\n        var entity = await _repository.GetByIdAsync(id);\n        return _mapper.Map<<Entidad>ReadDto>(entity);\n    }\n\n    public async Task<Guid> CreateAsync(<Entidad>CreateDto dto)\n    {\n        if (dto == null)\n            throw new InvalidValueException(\"Los datos para crear <Entidad> no pueden ser nulos.\");\n        \n        var entity = <Entidad>.Create(dto.Id ?? Guid.NewGuid());\n        entity.SetName(dto.Name);\n        \n        // Procesar otras propiedades...\n        \n        await _repository.SaveAsync(entity);\n        return entity.Id;\n    }\n\n    public async Task UpdateAsync(Guid id, <Entidad>UpdateDto dto)\n    {\n        if (dto == null)\n            throw new InvalidValueException(\"Los datos para actualizar <Entidad> no pueden ser nulos.\");\n        \n        var entity = await _repository.GetByIdAsync(id);\n        if (entity == null)\n        {\n            throw new ApplicationException($\"<Entidad> with id {id} not found.\");\n        }\n\n        entity.SetName(dto.Name);\n        \n        // Actualizar otras propiedades...\n        \n        await _repository.SaveAsync(entity);\n    }\n\n    public async Task DeleteAsync(Guid id)\n    {\n        await _repository.DeleteAsync(id);\n    }\n}"
    }
  ],
  "category": "template",
  "doc": "../../docs/DDD_Core_Guide.md",
  "id": "DDD-tpl-application_service",
  "placeholders": [
    {"name": "namespace", "description": "Namespace completo para el servicio"},
    {"name": "entity_name", "description": "Nombre de la entidad principal"},
    {"name": "repository_usings", "description": "Using statements para repositorios", "multiline": true},
    {"name": "repository_fields", "description": "Declaración de campos para repositorios", "multiline": true},
    {"name": "repository_initialization", "description": "Inicialización de repositorios en constructor", "multiline": true},
    {"name": "service_methods", "description": "Métodos del servicio", "multiline": true}
  ],
  "template": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Odoonto.Domain.Core.Models.Exceptions;\nusing Odoonto.Application.DTOs.{{entity_name_plural}};\nusing Odoonto.Application.Interfaces.{{entity_name_plural}};\nusing Odoonto.Domain.Models.{{entity_name_plural}};\n{{repository_usings}}\n\nnamespace {{namespace}}\n{\n    /// <summary>\n    /// Implementación del servicio de aplicación para {{entity_name}}\n    /// </summary>\n    public class {{entity_name}}AppService : I{{entity_name}}AppService\n    {\n        // Repositorios necesarios\n        {{repository_fields}}\n        \n        // Constructor con inyección de dependencias\n        public {{entity_name}}AppService({{constructor_parameters}})\n        {\n            {{repository_initialization}}\n        }\n        \n        /// <summary>\n        /// Obtiene todos los {{entity_name_plural}}\n        /// </summary>\n        public async Task<IEnumerable<{{entity_name}}ReadDto>> GetAll()\n        {\n            var entities = await _{{entity_name_camel}}Repository.GetAll();\n            return _mapper.Map<IEnumerable<{{entity_name}}ReadDto>>(entities);\n        }\n        \n        /// <summary>\n        /// Obtiene un {{entity_name}} por su ID\n        /// </summary>\n        public async Task<{{entity_name}}ReadDto> GetById(Guid id)\n        {\n            var entity = await _{{entity_name_camel}}Repository.GetByIdOrThrow(id);\n            return _mapper.Map<{{entity_name}}ReadDto>(entity);\n        }\n        \n        /// <summary>\n        /// Crea un nuevo {{entity_name}}\n        /// </summary>\n        public async Task<Guid> Create({{entity_name}}CreateDto createDto)\n        {\n            if (createDto == null)\n                throw new InvalidValueException(\"Los datos para crear {{entity_name}} no pueden ser nulos.\");\n                \n            // Crear la entidad a través de su método factory\n            var id = Guid.NewGuid();\n            var entity = {{entity_name}}.Create(id);\n            \n            // Establecer propiedades validando en el dominio\n            {{set_entity_properties_create}}\n            \n            // Persistir y retornar ID\n            await _{{entity_name_camel}}Repository.Add(entity);\n            return entity.Id;\n        }\n        \n        /// <summary>\n        /// Actualiza un {{entity_name}} existente\n        /// </summary>\n        public async Task Update(Guid id, {{entity_name}}UpdateDto updateDto)\n        {\n            if (updateDto == null)\n                throw new InvalidValueException(\"Los datos para actualizar {{entity_name}} no pueden ser nulos.\");\n                \n            // Obtener la entidad existente\n            var entity = await _{{entity_name_camel}}Repository.GetByIdOrThrow(id);\n            \n            // Actualizar propiedades validando en el dominio\n            {{set_entity_properties_update}}\n            \n            // Persistir cambios\n            await _{{entity_name_camel}}Repository.Update(entity);\n        }\n        \n        /// <summary>\n        /// Elimina un {{entity_name}}\n        /// </summary>\n        public async Task Delete(Guid id)\n        {\n            // Verificar que existe antes de eliminar\n            await _{{entity_name_camel}}Repository.GetByIdOrThrow(id);\n            \n            // Eliminar\n            await _{{entity_name_camel}}Repository.DeleteById(id);\n        }\n        \n        // Métodos adicionales específicos por operación\n        {{service_methods}}\n    }\n}",
  "filePattern": "src/Application/Odoonto.Application/Services/{{entity_name_plural}}/{{entity_name}}AppService.cs"
}