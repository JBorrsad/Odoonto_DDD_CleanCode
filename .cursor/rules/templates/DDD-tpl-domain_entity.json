{
  "name": "domain_entity",
  "description": "Reglas para entidades de dominio DDD",
  "patterns": [
    ".*[Ee]ntity\\.cs$",
    ".*/Models/.+\\.cs$",
    ".*/Domain/.*/Models/.+\\.cs$",
    ".*Domain.*Model.*\\.cs$"
  ],
  "keywords": [
    "entidad",
    "entity",
    "modelo de dominio",
    "domain model"
  ],
  "documentation": "../docs/domain_entity.mdc",
  "example_file": "../DDD_Ejemplos_Codigo/1_Domain_Entity.cs",
  "templates": [
    {
      "name": "Entidad de Dominio b\u00e1sica",
      "description": "Plantilla para una entidad DDD con propiedades encapsuladas y m\u00e9todos de comportamiento",
      "code": "namespace TuProyecto.Domain.Models.<Modulo>;\n\nusing System;\nusing TuProyecto.Domain.Core.Models;\nusing TuProyecto.Domain.Core.Models.Exceptions;\n\npublic class <Entidad> : Entity\n{\n    public string Name { get; private set; }\n\n    // Constructor privado - solo accesible desde el m\u00e9todo factory\n    private <Entidad>(Guid id) : base(id)\n    {\n        Name = null;\n    }\n\n    // M\u00e9todo factory est\u00e1tico para crear instancias v\u00e1lidas\n    public static <Entidad> Create(Guid id)\n    {\n        if (id.Equals(Guid.Empty))\n        {\n            throw new InvalidValueException(\"The <Entidad> id can't be empty.\");\n        }\n\n        <Entidad> entity = new <Entidad>(id);\n        entity.UpdateEditDate();\n        return entity;\n    }\n\n    // M\u00e9todo de comportamiento con validaciones\n    public void SetName(string name)\n    {\n        if (string.IsNullOrWhiteSpace(name))\n        {\n            throw new InvalidValueException(\"The <Entidad> name can't be null/empty.\");\n        }\n\n        Name = name;\n        UpdateEditDate();\n    }\n}"
    }
  ],
  "category": "template",
  "doc": "../../docs/DDD_Core_Guide.md"
}