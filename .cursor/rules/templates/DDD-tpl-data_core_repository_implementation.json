{
  "name": "data_core_repository_implementation",
  "description": "Reglas para la implementaci\u00f3n base Repository en Data.Core",
  "patterns": [
    "Repository\\.cs$",
    ".*/Data/.*/Core/Repositories/Repository\\.cs$"
  ],
  "keywords": [
    "repository implementation base",
    "implementaci\u00f3n repositorio base",
    "repositorio gen\u00e9rico implementaci\u00f3n"
  ],
  "documentation": "../global/ddd_estructura.mdc",
  "example_file": "../DDD_Ejemplos_Codigo/13_Data_Core_Repository_Implementation.cs",
  "templates": [
    {
      "name": "Implementaci\u00f3n Base Repository",
      "description": "Plantilla para la implementaci\u00f3n base de repositorio con operaciones gen\u00e9ricas",
      "code": "namespace TuProyecto.Data.Core.Repositories;\n\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\nusing TuProyecto.Data.Core.Contexts;\nusing TuProyecto.Domain.Core.Models;\nusing TuProyecto.Domain.Core.Models.Exceptions;\nusing TuProyecto.Domain.Core.Repositories;\n\npublic abstract class Repository<T> : IRepository<T> where T : Entity\n{\n    protected readonly DbContext _context;\n\n    protected Repository(DbContext context)\n    {\n        _context = context;\n    }\n\n    public virtual async Task<IEnumerable<T>> GetAll()\n    {\n        return await _context.Set<T>().ToListAsync();\n    }\n\n    public virtual async Task<T> GetById(Guid id)\n    {\n        return await _context.Set<T>().FindAsync(id);\n    }\n\n    public virtual async Task<T> GetByIdOrThrow(Guid id, string errorMessage = null)\n    {\n        T entity = await GetById(id);\n\n        if (entity is null)\n        {\n            throw new ValueNotFoundException(errorMessage ?? $\"The {typeof(T).Name} (Id: {id}) not found.\");\n        }\n\n        return entity;\n    }\n\n    public virtual async Task<T> GetByIdOrThrow(Guid id, Func<IQueryable<T>, IQueryable<T>> include, string errorMessage = null)\n    {\n        IQueryable<T> query = _context.Set<T>().AsQueryable();\n\n        if (include != null)\n        {\n            query = include(query);\n        }\n\n        T entity = await query.FirstOrDefaultAsync(e => e.Id == id);\n\n        if (entity is null)\n        {\n            throw new ValueNotFoundException(errorMessage ?? $\"The {typeof(T).Name} (Id: {id}) not found.\");\n        }\n\n        return entity;\n    }\n\n    public virtual async Task<bool> Exists(Guid id)\n    {\n        return await _context.Set<T>().AnyAsync(e => e.Id == id);\n    }\n\n    public virtual async Task Create(T entity)\n    {\n        await _context.Set<T>().AddAsync(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public virtual async Task Update(T entity)\n    {\n        _context.Set<T>().Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public virtual async Task Delete(T entity)\n    {\n        _context.Set<T>().Remove(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public virtual async Task Delete(Guid id)\n    {\n        T entity = await GetById(id);\n        \n        if (entity != null)\n        {\n            await Delete(entity);\n        }\n    }\n}"
    }
  ],
  "category": "template",
  "doc": "../../docs/DDD_Core_Guide.md"
}