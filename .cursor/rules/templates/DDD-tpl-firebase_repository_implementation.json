{
  "name": "firebase_repository_implementation",
  "description": "Reglas para implementaciones de repositorio con Firebase Firestore",
  "patterns": [
    ".*FirebaseRepository\\.cs$",
    ".*Firebase.*Repository\\.cs$",
    ".*/Data/.*/Repositories/Firebase/.+\\.cs$"
  ],
  "keywords": [
    "repositorio firebase",
    "firestore repository",
    "implementaci\u00f3n firebase",
    "acceso a datos nosql"
  ],
  "documentation": "../docs/firebase_repository_implementation.mdc",
  "example_file": "../DDD_Ejemplos_Codigo/15_Firebase_Repository_Implementation.cs",
  "templates": [
    {
      "name": "Implementaci\u00f3n de Repositorio Firebase",
      "description": "Plantilla para una implementaci\u00f3n de repositorio utilizando Firebase Firestore",
      "code": "namespace TuProyecto.Data.Repositories.<Modulo>;\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Google.Cloud.Firestore;\nusing Microsoft.EntityFrameworkCore;\nusing TuProyecto.Data.Core.Contexts;\nusing TuProyecto.Data.Core.Repositories;\nusing TuProyecto.Domain.Models.<Modulo>;\nusing TuProyecto.Domain.Repositories.<Modulo>;\n\npublic class <Entidad>FirebaseRepository : Repository<<Entidad>>, I<Entidad>Repository\n{\n    private readonly FirebaseDbContext _firebaseContext;\n    private readonly string _collectionName = \"<Entidad>s\";\n\n    public <Entidad>FirebaseRepository(FirebaseDbContext firebaseContext) : base(null)\n    {\n        _firebaseContext = firebaseContext;\n    }\n\n    public override async Task<IEnumerable<<Entidad>>> GetAllAsync()\n    {\n        try\n        {\n            CollectionReference collection = _firebaseContext.FirestoreDb.Collection(_collectionName);\n            QuerySnapshot snapshot = await collection.GetSnapshotAsync();\n\n            List<<Entidad>> entities = new List<<Entidad>>();\n\n            foreach (DocumentSnapshot document in snapshot.Documents)\n            {\n                if (document.Exists)\n                {\n                    <Entidad> entity = MapFromDocument(document);\n                    entities.Add(entity);\n                }\n            }\n\n            return entities;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error al obtener <Entidad>s: {ex.Message}\");\n            throw;\n        }\n    }\n\n    public override async Task<<Entidad>> GetByIdAsync(Guid id)\n    {\n        try\n        {\n            DocumentReference docRef = _firebaseContext.FirestoreDb.Collection(_collectionName).Document(id.ToString());\n            DocumentSnapshot snapshot = await docRef.GetSnapshotAsync();\n\n            if (snapshot.Exists)\n            {\n                return MapFromDocument(snapshot);\n            }\n\n            return null;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error al obtener <Entidad> con id {id}: {ex.Message}\");\n            throw;\n        }\n    }\n\n    public override async Task<Guid> SaveAsync(<Entidad> entity)\n    {\n        try\n        {\n            Dictionary<string, object> entityData = MapToDocument(entity);\n\n            await _firebaseContext.FirestoreDb\n                .Collection(_collectionName)\n                .Document(entity.Id.ToString())\n                .SetAsync(entityData);\n\n            return entity.Id;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error al guardar <Entidad>: {ex.Message}\");\n            throw;\n        }\n    }\n\n    public override async Task DeleteAsync(Guid id)\n    {\n        try\n        {\n            await _firebaseContext.FirestoreDb\n                .Collection(_collectionName)\n                .Document(id.ToString())\n                .DeleteAsync();\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error al eliminar <Entidad> con id {id}: {ex.Message}\");\n            throw;\n        }\n    }\n\n    public async Task<IEnumerable<<Entidad>>> FindByNameAsync(string name)\n    {\n        try\n        {\n            Query query = _firebaseContext.FirestoreDb\n                .Collection(_collectionName)\n                .WhereEqualTo(\"Name\", name);\n\n            QuerySnapshot querySnapshot = await query.GetSnapshotAsync();\n\n            List<<Entidad>> entities = new List<<Entidad>>();\n\n            foreach (DocumentSnapshot document in querySnapshot.Documents)\n            {\n                if (document.Exists)\n                {\n                    <Entidad> entity = MapFromDocument(document);\n                    entities.Add(entity);\n                }\n            }\n\n            return entities;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error al buscar <Entidad>s por nombre {name}: {ex.Message}\");\n            throw;\n        }\n    }\n\n    private <Entidad> MapFromDocument(DocumentSnapshot document)\n    {\n        Dictionary<string, object> data = document.ToDictionary();\n        \n        Guid id = Guid.Parse(document.Id);\n        string name = data.TryGetValue(\"Name\", out object nameObj) ? nameObj.ToString() : string.Empty;\n        DateTime creationDate = data.TryGetValue(\"CreationDate\", out object creationDateObj) && creationDateObj is Timestamp creationTimestamp\n            ? creationTimestamp.ToDateTime()\n            : DateTime.MinValue;\n        DateTime editDate = data.TryGetValue(\"EditDate\", out object editDateObj) && editDateObj is Timestamp editTimestamp\n            ? editTimestamp.ToDateTime()\n            : DateTime.MinValue;\n\n        <Entidad> entity = <Entidad>.Create(id);\n        entity.SetName(name);\n        \n        typeof(<Entidad>).GetProperty(\"CreationDate\").SetValue(entity, creationDate);\n        typeof(<Entidad>).GetProperty(\"EditDate\").SetValue(entity, editDate);\n        \n        return entity;\n    }\n\n    private Dictionary<string, object> MapToDocument(<Entidad> entity)\n    {\n        return new Dictionary<string, object>\n        {\n            { \"Name\", entity.Name },\n            { \"CreationDate\", Timestamp.FromDateTime(entity.CreationDate.ToUniversalTime()) },\n            { \"EditDate\", Timestamp.FromDateTime(entity.EditDate.ToUniversalTime()) }\n        };\n    }\n}"
    }
  ],
  "category": "template",
  "doc": "../../docs/DDD_Core_Guide.md"
}