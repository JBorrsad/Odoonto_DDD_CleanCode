{
  "name": "react_presenter",
  "description": "Reglas para presenters (hooks personalizados) en React/TypeScript",
  "patterns": [
    ".*use.+\\.tsx$",
    ".*use.+\\.ts$",
    ".*/hooks/.+\\.ts$",
    ".*/hooks/.+\\.tsx$",
    ".*/presenters/.+\\.ts$",
    ".*/presenters/.+\\.tsx$"
  ],
  "keywords": [
    "presenter react",
    "custom hook",
    "hook personalizado",
    "l\u00f3gica de negocio frontend"
  ],
  "documentation": "../docs/react_presenter.mdc",
  "example_file": "../DDD_Ejemplos_Codigo/20_React_Presenter.tsx",
  "templates": [
    {
      "name": "Presenter (Hook) para React",
      "description": "Plantilla para un presenter implementado como un hook personalizado de React",
      "code": "// src/hooks/<ModuloPlural>/use<Entidad>.tsx\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { I<Entidad>, I<Entidad>CreateDto, I<Entidad>UpdateDto, create<Entidad>, update<Entidad> } from \"../../models/<ModuloPlural>/<Entidad>Model\";\nimport { <Entidad>Service } from \"../../services/<ModuloPlural>/<Entidad>Service\";\n\n/**\n * Estados de carga para operaciones\n */\ninterface LoadingState {\n  isLoading: boolean;\n  isCreating: boolean;\n  isUpdating: boolean;\n  isDeleting: boolean;\n}\n\n/**\n * Estado de error\n */\ninterface ErrorState {\n  error: Error | null;\n  errorMessage: string;\n}\n\n/**\n * Hook que implementa la l\u00f3gica de negocio para <Entidad>\n */\nexport const use<Entidad> = () => {\n  // Estado para almacenar los datos\n  const [<ModuloPlural>List, set<ModuloPlural>List] = useState<I<Entidad>[]>([]);\n  const [selected<Entidad>, setSelected<Entidad>] = useState<I<Entidad> | null>(null);\n  \n  // Estado para manejar carga\n  const [loadingState, setLoadingState] = useState<LoadingState>({\n    isLoading: false,\n    isCreating: false,\n    isUpdating: false,\n    isDeleting: false\n  });\n  \n  // Estado para manejar errores\n  const [errorState, setErrorState] = useState<ErrorState>({\n    error: null,\n    errorMessage: \"\"\n  });\n  \n  // Instancia del servicio\n  const service = new <Entidad>Service();\n  \n  /**\n   * Carga todos los/las <ModuloPlural>\n   */\n  const fetchAll = useCallback(async () => {\n    setLoadingState(prev => ({ ...prev, isLoading: true }));\n    setErrorState({ error: null, errorMessage: \"\" });\n    \n    try {\n      const data = await service.getAll();\n      set<ModuloPlural>List(data);\n    } catch (error) {\n      console.error(\"Error fetching <ModuloPlural>:\", error);\n      setErrorState({\n        error: error as Error,\n        errorMessage: `Error al cargar <ModuloPlural>: ${(error as Error).message}`\n      });\n    } finally {\n      setLoadingState(prev => ({ ...prev, isLoading: false }));\n    }\n  }, []);\n  \n  /**\n   * Carga un/a <Entidad> por su ID\n   */\n  const fetchById = useCallback(async (id: string) => {\n    setLoadingState(prev => ({ ...prev, isLoading: true }));\n    setErrorState({ error: null, errorMessage: \"\" });\n    \n    try {\n      const data = await service.getById(id);\n      setSelected<Entidad>(data);\n      return data;\n    } catch (error) {\n      console.error(`Error fetching <Entidad> with id ${id}:`, error);\n      setErrorState({\n        error: error as Error,\n        errorMessage: `Error al cargar <Entidad>: ${(error as Error).message}`\n      });\n      return null;\n    } finally {\n      setLoadingState(prev => ({ ...prev, isLoading: false }));\n    }\n  }, []);\n  \n  /**\n   * Crea un/a nuevo/a <Entidad>\n   */\n  const create = useCallback(async (data: I<Entidad>CreateDto) => {\n    setLoadingState(prev => ({ ...prev, isCreating: true }));\n    setErrorState({ error: null, errorMessage: \"\" });\n    \n    try {\n      const id = await service.create(data);\n      const newItem = create<Entidad>(data);\n      set<ModuloPlural>List(prev => [...prev, { ...newItem, id }]);\n      return id;\n    } catch (error) {\n      console.error(\"Error creating <Entidad>:\", error);\n      setErrorState({\n        error: error as Error,\n        errorMessage: `Error al crear <Entidad>: ${(error as Error).message}`\n      });\n      return null;\n    } finally {\n      setLoadingState(prev => ({ ...prev, isCreating: false }));\n    }\n  }, []);\n  \n  /**\n   * Actualiza un/a <Entidad> existente\n   */\n  const updateItem = useCallback(async (id: string, data: I<Entidad>UpdateDto) => {\n    setLoadingState(prev => ({ ...prev, isUpdating: true }));\n    setErrorState({ error: null, errorMessage: \"\" });\n    \n    try {\n      await service.update(id, data);\n      \n      // Actualiza tanto la lista como el seleccionado si corresponde\n      set<ModuloPlural>List(prev => prev.map(item => {\n        if (item.id === id) {\n          const updated = update<Entidad>(item, data);\n          if (selected<Entidad>?.id === id) {\n            setSelected<Entidad>(updated);\n          }\n          return updated;\n        }\n        return item;\n      }));\n      \n      return true;\n    } catch (error) {\n      console.error(`Error updating <Entidad> with id ${id}:`, error);\n      setErrorState({\n        error: error as Error,\n        errorMessage: `Error al actualizar <Entidad>: ${(error as Error).message}`\n      });\n      return false;\n    } finally {\n      setLoadingState(prev => ({ ...prev, isUpdating: false }));\n    }\n  }, [selected<Entidad>]);\n  \n  /**\n   * Elimina un/a <Entidad>\n   */\n  const deleteItem = useCallback(async (id: string) => {\n    setLoadingState(prev => ({ ...prev, isDeleting: true }));\n    setErrorState({ error: null, errorMessage: \"\" });\n    \n    try {\n      await service.delete(id);\n      \n      set<ModuloPlural>List(prev => prev.filter(item => item.id !== id));\n      \n      if (selected<Entidad>?.id === id) {\n        setSelected<Entidad>(null);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error(`Error deleting <Entidad> with id ${id}:`, error);\n      setErrorState({\n        error: error as Error,\n        errorMessage: `Error al eliminar <Entidad>: ${(error as Error).message}`\n      });\n      return false;\n    } finally {\n      setLoadingState(prev => ({ ...prev, isDeleting: false }));\n    }\n  }, [selected<Entidad>]);\n  \n  // Carga inicial de datos\n  useEffect(() => {\n    fetchAll();\n  }, [fetchAll]);\n  \n  // Retorna el estado y las operaciones\n  return {\n    // Estado\n    <ModuloPlural>: <ModuloPlural>List,\n    selected<Entidad>,\n    setSelected<Entidad>,\n    ...loadingState,\n    ...errorState,\n    \n    // Operaciones\n    fetchAll,\n    fetchById,\n    create,\n    update: updateItem,\n    delete: deleteItem\n  };\n};"
    }
  ],
  "category": "template",
  "doc": "../../docs/DDD_Core_Guide.md"
}