{
  "name": "react_view",
  "description": "Reglas para componentes de vista React/TypeScript",
  "patterns": [
    ".*/views/.+\\.tsx$",
    ".*/components/.+\\.tsx$",
    ".*/pages/.+\\.tsx$"
  ],
  "keywords": [
    "vista react",
    "react component",
    "react view",
    "componente ui"
  ],
  "documentation": "../docs/react_view.mdc",
  "example_file": "../DDD_Ejemplos_Codigo/21_React_View.tsx",
  "templates": [
    {
      "name": "Componente de Vista React",
      "description": "Plantilla para un componente de vista React que utiliza un hook personalizado (presenter)",
      "code": "// src/views/<ModuloPlural>/<Entidad>List.tsx\n\nimport { useState, useEffect } from \"react\";\nimport { use<Entidad> } from \"../../hooks/<ModuloPlural>/use<Entidad>\";\nimport { I<Entidad> } from \"../../models/<ModuloPlural>/<Entidad>Model\";\n\n/**\n * Componente para mostrar y gestionar un listado de <ModuloPlural>\n */\nexport const <Entidad>List: React.FC = () => {\n  // Utiliza el hook (presenter) para acceder al estado y operaciones\n  const {\n    <ModuloPlural>,\n    selected<Entidad>,\n    setSelected<Entidad>,\n    isLoading,\n    isCreating,\n    isUpdating,\n    isDeleting,\n    error,\n    errorMessage,\n    fetchAll,\n    create,\n    update,\n    delete: remove\n  } = use<Entidad>();\n  \n  // Estados locales para el formulario\n  const [formData, setFormData] = useState({ name: \"\" });\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Maneja los cambios en los campos del formulario\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  // Maneja el env\u00edo del formulario para crear/actualizar\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (isEditing && selected<Entidad>) {\n      await update(selected<Entidad>.id, formData);\n    } else {\n      await create(formData);\n    }\n    \n    resetForm();\n  };\n  \n  // Prepara el formulario para editar\n  const handleEdit = (item: I<Entidad>) => {\n    setSelected<Entidad>(item);\n    setFormData({ name: item.name });\n    setIsEditing(true);\n  };\n  \n  // Prepara el formulario para eliminar\n  const handleDelete = async (id: string) => {\n    if (window.confirm(\"\u00bfEst\u00e1 seguro de que desea eliminar este elemento?\")) {\n      await remove(id);\n    }\n  };\n  \n  // Reinicia el formulario\n  const resetForm = () => {\n    setFormData({ name: \"\" });\n    setIsEditing(false);\n    setSelected<Entidad>(null);\n  };\n  \n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Gesti\u00f3n de <ModuloPlural></h1>\n      \n      {/* Muestra errores si existen */}\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\" role=\"alert\">\n          <p className=\"font-bold\">Error</p>\n          <p>{errorMessage}</p>\n        </div>\n      )}\n      \n      {/* Formulario */}\n      <div className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n        <h2 className=\"text-xl font-semibold mb-4\">\n          {isEditing ? \"Editar\" : \"Crear\"} <Entidad>\n        </h2>\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"name\">\n              Nombre\n            </label>\n            <input\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleInputChange}\n              placeholder=\"Nombre de <Entidad>\"\n              required\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <button\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n              type=\"submit\"\n              disabled={isCreating || isUpdating}\n            >\n              {isCreating || isUpdating ? (\n                <span>Procesando...</span>\n              ) : isEditing ? (\n                <span>Actualizar</span>\n              ) : (\n                <span>Crear</span>\n              )}\n            </button>\n            \n            {isEditing && (\n              <button\n                className=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n                type=\"button\"\n                onClick={resetForm}\n              >\n                Cancelar\n              </button>\n            )}\n          </div>\n        </form>\n      </div>\n      \n      {/* Lista de <ModuloPlural> */}\n      <div className=\"bg-white shadow-md rounded px-8 pt-6 pb-8\">\n        <h2 className=\"text-xl font-semibold mb-4\">Lista de <ModuloPlural></h2>\n        \n        {isLoading ? (\n          <p className=\"text-center\">Cargando...</p>\n        ) : <ModuloPlural>.length === 0 ? (\n          <p className=\"text-center\">No hay <ModuloPlural> disponibles.</p>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full bg-white\">\n              <thead>\n                <tr>\n                  <th className=\"px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 font-semibold text-gray-600 uppercase tracking-wider\">\n                    Nombre\n                  </th>\n                  <th className=\"px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 font-semibold text-gray-600 uppercase tracking-wider\">\n                    Fecha creaci\u00f3n\n                  </th>\n                  <th className=\"px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 font-semibold text-gray-600 uppercase tracking-wider\">\n                    Acciones\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {<ModuloPlural>.map((item) => (\n                  <tr key={item.id}>\n                    <td className=\"px-6 py-4 whitespace-no-wrap border-b border-gray-500\">\n                      {item.name}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-no-wrap border-b border-gray-500\">\n                      {item.creationDate.toLocaleDateString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-no-wrap border-b border-gray-500\">\n                      <button\n                        className=\"bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-1 px-3 rounded mr-2\"\n                        onClick={() => handleEdit(item)}\n                        disabled={isUpdating || isDeleting}\n                      >\n                        Editar\n                      </button>\n                      <button\n                        className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-3 rounded\"\n                        onClick={() => handleDelete(item.id)}\n                        disabled={isDeleting}\n                      >\n                        {isDeleting && selected<Entidad>?.id === item.id ? \"Eliminando...\" : \"Eliminar\"}\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};"
    }
  ],
  "category": "template",
  "doc": "../../docs/DDD_Core_Guide.md"
}