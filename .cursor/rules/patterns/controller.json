{
  "name": "controller",
  "description": "Reglas para controladores API (Presentation Layer)",
  "patterns": [
    ".*Controller\\.cs$",
    ".*/Presentation/.*/Controllers/.+\\.cs$",
    ".*/API/Controllers/.+\\.cs$"
  ],
  "keywords": [
    "controlador",
    "controller",
    "api endpoint",
    "rest"
  ],
  "documentation": "../docs/controller.mdc",
  "example_file": "../DDD_Ejemplos_Codigo/9_Presentation_Controller.cs",
  "templates": [
    {
      "name": "Controlador API REST",
      "description": "Plantilla para un controlador API REST con operaciones CRUD",
      "code": "namespace TuProyecto.Presentation.Controllers.<Modulo>;\n\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing TuProyecto.Application.DTO.<Modulo>;\nusing TuProyecto.Application.Services.<Modulo>;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class <Entidad>Controller : ControllerBase\n{\n    private readonly I<Entidad>AppService _appService;\n\n    public <Entidad>Controller(I<Entidad>AppService appService)\n    {\n        _appService = appService;\n    }\n\n    [HttpGet]\n    [ProducesResponseType(typeof(IEnumerable<<Entidad>QueryDto>), StatusCodes.Status200OK)]\n    public async Task<IActionResult> GetAll()\n    {\n        var result = await _appService.GetAllAsync();\n        return Ok(result);\n    }\n\n    [HttpGet(\"{id}\")]\n    [ProducesResponseType(typeof(<Entidad>ReadDto), StatusCodes.Status200OK)]\n    [ProducesResponseType(StatusCodes.Status404NotFound)]\n    public async Task<IActionResult> GetById(Guid id)\n    {\n        var entity = await _appService.GetByIdAsync(id);\n        if (entity == null)\n        {\n            return NotFound();\n        }\n        return Ok(entity);\n    }\n\n    [HttpPost]\n    [ProducesResponseType(typeof(Guid), StatusCodes.Status201Created)]\n    [ProducesResponseType(StatusCodes.Status400BadRequest)]\n    public async Task<IActionResult> Create(<Entidad>CreateDto dto)\n    {\n        try\n        {\n            var id = await _appService.CreateAsync(dto);\n            return CreatedAtAction(nameof(GetById), new { id }, id);\n        }\n        catch (Exception ex)\n        {\n            return BadRequest(ex.Message);\n        }\n    }\n\n    [HttpPut(\"{id}\")]\n    [ProducesResponseType(StatusCodes.Status204NoContent)]\n    [ProducesResponseType(StatusCodes.Status400BadRequest)]\n    [ProducesResponseType(StatusCodes.Status404NotFound)]\n    public async Task<IActionResult> Update(Guid id, <Entidad>UpdateDto dto)\n    {\n        try\n        {\n            await _appService.UpdateAsync(id, dto);\n            return NoContent();\n        }\n        catch (ApplicationException ex) when (ex.Message.Contains(\"not found\"))\n        {\n            return NotFound();\n        }\n        catch (Exception ex)\n        {\n            return BadRequest(ex.Message);\n        }\n    }\n\n    [HttpDelete(\"{id}\")]\n    [ProducesResponseType(StatusCodes.Status204NoContent)]\n    public async Task<IActionResult> Delete(Guid id)\n    {\n        await _appService.DeleteAsync(id);\n        return NoContent();\n    }\n}"
    }
  ]
} 