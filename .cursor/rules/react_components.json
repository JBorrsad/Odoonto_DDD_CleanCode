{
  "name": "react_components",
  "description": "Reglas y ejemplos para crear componentes React frontend siguiendo patrón MVP",
  "patterns": [
    "crear? componente(?:s)? react",
    "vista react",
    "presentador react",
    "modelo react",
    "servicio react",
    "react component",
    "frontend (component|service|presenter|model)"
  ],
  "references": [
    {
      "path": "src/DDD_Ejemplos_Codigo/18_React_Model.tsx",
      "description": "Ejemplo de modelo React"
    },
    {
      "path": "src/DDD_Ejemplos_Codigo/19_React_Service.tsx",
      "description": "Ejemplo de servicio API React"
    },
    {
      "path": "src/DDD_Ejemplos_Codigo/20_React_Presenter.tsx",
      "description": "Ejemplo de presentador React (Custom Hook)"
    },
    {
      "path": "src/DDD_Ejemplos_Codigo/21_React_View.tsx",
      "description": "Ejemplo de vista React"
    },
    {
      "path": "src/DDD_Ejemplos_Codigo/23_Frontend_Estructura.md",
      "description": "Estructura recomendada para frontend"
    }
  ],
  "templates": [
    {
      "name": "Modelo React",
      "code": "// src/models/<modulo>/<Entidad>.model.ts\n\n/**\n * Interfaces y modelos para <Entidad>\n */\n\n// Interfaces base\nexport interface Entity {\n  id: string;\n  creationDate: string;\n  editDate: string;\n}\n\n// Interfaces para operaciones CRUD\nexport interface <Entidad>Base {\n  name: string;\n  // Otras propiedades básicas\n}\n\nexport interface <Entidad>CreateModel {\n  id?: string;\n  name: string;\n  // Otras propiedades para creación\n}\n\nexport interface <Entidad>UpdateModel {\n  id: string;\n  name: string;\n  // Otras propiedades para actualización\n}\n\nexport interface <Entidad>ReadModel extends Entity, <Entidad>Base {\n  // Propiedades para detalle completo\n  items: ItemInModel[];\n}\n\nexport interface <Entidad>QueryModel extends Entity, <Entidad>Base {\n  // Propiedades para listados\n  itemCount: number;\n}\n\n// Interfaces para relaciones\nexport interface ItemInModel {\n  id: string;\n  name: string;\n}\n\n// Clase de modelo con comportamiento\nexport class <Entidad> implements <Entidad>ReadModel {\n  id: string;\n  name: string;\n  creationDate: string;\n  editDate: string;\n  items: ItemInModel[];\n\n  constructor(data: <Entidad>ReadModel) {\n    this.id = data.id;\n    this.name = data.name;\n    this.creationDate = data.creationDate;\n    this.editDate = data.editDate;\n    this.items = data.items || [];\n  }\n\n  // Getters derivados\n  get itemCount(): number {\n    return this.items.length;\n  }\n\n  // Métodos para manipulación local\n  addItem(item: ItemInModel): void {\n    if (!this.items.find(i => i.id === item.id)) {\n      this.items.push(item);\n    }\n  }\n\n  removeItem(itemId: string): void {\n    this.items = this.items.filter(item => item.id !== itemId);\n  }\n\n  // Validación\n  isValid(): boolean {\n    return !!this.name && this.name.trim().length > 0;\n  }\n\n  // Serialización\n  toCreateModel(): <Entidad>CreateModel {\n    return {\n      id: this.id,\n      name: this.name\n    };\n  }\n\n  toUpdateModel(): <Entidad>UpdateModel {\n    return {\n      id: this.id,\n      name: this.name\n    };\n  }\n}"
    },
    {
      "name": "Servicio API React",
      "code": "// src/services/api/<modulo>/<entidad>.service.ts\n\nimport axios, { AxiosError, AxiosInstance, AxiosResponse } from 'axios';\nimport { \n  <Entidad>ReadModel, \n  <Entidad>QueryModel, \n  <Entidad>CreateModel, \n  <Entidad>UpdateModel \n} from '../../models/<modulo>/<Entidad>.model';\n\n/**\n * Servicio para interactuar con la API de <Entidad>\n */\nexport class <Entidad>Service {\n  private http: AxiosInstance;\n  private baseUrl: string;\n\n  constructor(baseURL: string = process.env.REACT_APP_API_URL || '/api') {\n    this.baseUrl = `${baseURL}/<entidad>s`;\n    this.http = axios.create({\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    // Interceptor para agregar token de autenticación\n    this.http.interceptors.request.use(\n      (config) => {\n        // Obtener token de autenticación\n        const token = localStorage.getItem('auth_token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      }\n    );\n\n    // Interceptor para manejar errores\n    this.http.interceptors.response.use(\n      (response) => response,\n      (error: AxiosError) => {\n        const customError = {\n          status: error.response?.status || 500,\n          message: error.response?.data?.message || 'Error desconocido',\n          data: error.response?.data || {}\n        };\n        return Promise.reject(customError);\n      }\n    );\n  }\n\n  // GET /<entidad>s\n  async getAll(): Promise<<Entidad>QueryModel[]> {\n    try {\n      const response = await this.http.get(this.baseUrl);\n      return response.data;\n    } catch (error) {\n      console.error('Error obteniendo <entidad>s:', error);\n      throw error;\n    }\n  }\n\n  // GET /<entidad>s/{id}\n  async getById(id: string): Promise<<Entidad>ReadModel> {\n    try {\n      const response = await this.http.get(`${this.baseUrl}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error obteniendo <entidad> ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // POST /<entidad>s\n  async create(data: <Entidad>CreateModel): Promise<string> {\n    try {\n      const response = await this.http.post(this.baseUrl, data);\n      // Extraer ID del header Location o del body\n      return response.data.id || '';\n    } catch (error) {\n      console.error('Error creando <entidad>:', error);\n      throw error;\n    }\n  }\n\n  // PUT /<entidad>s/{id}\n  async update(id: string, data: <Entidad>UpdateModel): Promise<void> {\n    try {\n      await this.http.put(`${this.baseUrl}/${id}`, data);\n    } catch (error) {\n      console.error(`Error actualizando <entidad> ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // DELETE /<entidad>s/{id}\n  async delete(id: string): Promise<void> {\n    try {\n      await this.http.delete(`${this.baseUrl}/${id}`);\n    } catch (error) {\n      console.error(`Error eliminando <entidad> ${id}:`, error);\n      throw error;\n    }\n  }\n}"
    },
    {
      "name": "Presentador React",
      "code": "// src/presenters/<modulo>/use<Entidad>Presenter.ts\n\nimport { useState, useEffect } from 'react';\nimport { \n  <Entidad>, \n  <Entidad>ReadModel, \n  <Entidad>CreateModel, \n  <Entidad>UpdateModel \n} from '../../models/<modulo>/<Entidad>.model';\nimport { <Entidad>Service } from '../../services/api/<modulo>/<entidad>.service';\n\n/**\n * Presentador para <Entidad> (patrón MVP)\n * Custom hook que maneja la lógica de negocio y estado\n */\nexport function use<Entidad>Presenter() {\n  // Estado\n  const [items, setItems] = useState<<Entidad>[]>([]);\n  const [selectedItem, setSelectedItem] = useState<<Entidad> | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Servicios\n  const service = new <Entidad>Service();\n\n  // Cargar datos iniciales\n  useEffect(() => {\n    loadItems();\n  }, []);\n\n  // Métodos para cargar datos\n  const loadItems = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await service.getAll();\n      const mappedItems = data.map(item => new <Entidad>({\n        ...item,\n        items: [] // Inicialmente vacío para listados\n      }));\n      setItems(mappedItems);\n    } catch (err) {\n      setError('Error al cargar <entidad>s');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadItemById = async (id: string) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await service.getById(id);\n      const item = new <Entidad>(data);\n      setSelectedItem(item);\n      return item;\n    } catch (err) {\n      setError(`Error al cargar <entidad> ${id}`);\n      console.error(err);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Operaciones CRUD\n  const createItem = async (data: <Entidad>CreateModel) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Validación local antes de enviar\n      if (!data.name || data.name.trim() === '') {\n        throw new Error('El nombre es obligatorio');\n      }\n\n      const id = await service.create(data);\n      \n      // Actualizar lista para reflejar el cambio\n      await loadItems();\n      \n      return id;\n    } catch (err) {\n      setError('Error al crear <entidad>');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateItem = async (id: string, data: <Entidad>UpdateModel) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Validación local antes de enviar\n      if (!data.name || data.name.trim() === '') {\n        throw new Error('El nombre es obligatorio');\n      }\n\n      await service.update(id, data);\n      \n      // Actualizar datos para reflejar el cambio\n      if (selectedItem && selectedItem.id === id) {\n        await loadItemById(id);\n      }\n      await loadItems();\n    } catch (err) {\n      setError(`Error al actualizar <entidad> ${id}`);\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteItem = async (id: string) => {\n    setLoading(true);\n    setError(null);\n    try {\n      await service.delete(id);\n      \n      // Actualizar datos para reflejar el cambio\n      if (selectedItem && selectedItem.id === id) {\n        setSelectedItem(null);\n      }\n      await loadItems();\n    } catch (err) {\n      setError(`Error al eliminar <entidad> ${id}`);\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Devolver estado y métodos para la vista\n  return {\n    // Estado\n    items,\n    selectedItem,\n    loading,\n    error,\n    \n    // Operaciones\n    loadItems,\n    loadItemById,\n    createItem,\n    updateItem,\n    deleteItem\n  };\n}"
    },
    {
      "name": "Vista React",
      "code": "// src/views/pages/<modulo>/<Entidad>List.tsx\n\nimport React, { useState } from 'react';\nimport { <Entidad>CreateModel } from '../../../models/<modulo>/<Entidad>.model';\nimport { use<Entidad>Presenter } from '../../../presenters/<modulo>/use<Entidad>Presenter';\n\n/**\n * Componente de vista para listar <Entidad>s\n */\nexport const <Entidad>List: React.FC = () => {\n  // Estado local de UI\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [name, setName] = useState<string>('');\n  const [editId, setEditId] = useState<string | null>(null);\n  const [editName, setEditName] = useState<string>('');\n\n  // Usar el presentador con toda la lógica de negocio\n  const {\n    items,\n    loading,\n    error,\n    loadItems,\n    createItem,\n    updateItem,\n    deleteItem\n  } = use<Entidad>Presenter();\n\n  // Manejadores de eventos\n  const handleOpenModal = () => {\n    setName('');\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!name.trim()) {\n      return;\n    }\n    \n    try {\n      const data: <Entidad>CreateModel = {\n        name: name\n      };\n      \n      await createItem(data);\n      handleCloseModal();\n    } catch (err) {\n      console.error('Error en submit:', err);\n    }\n  };\n\n  const handleEdit = (id: string, currentName: string) => {\n    setEditId(id);\n    setEditName(currentName);\n  };\n\n  const handleCancelEdit = () => {\n    setEditId(null);\n    setEditName('');\n  };\n\n  const handleSaveEdit = async (id: string) => {\n    if (!editName.trim()) {\n      return;\n    }\n    \n    try {\n      await updateItem(id, { id, name: editName });\n      setEditId(null);\n    } catch (err) {\n      console.error('Error en edición:', err);\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    if (window.confirm('¿Confirma que desea eliminar este elemento?')) {\n      try {\n        await deleteItem(id);\n      } catch (err) {\n        console.error('Error en eliminación:', err);\n      }\n    }\n  };\n\n  // Renderizado\n  return (\n    <div className=\"container\">\n      <h1><Entidad>s</h1>\n      \n      {/* Mensaje de error */}\n      {error && (\n        <div className=\"alert alert-danger\">\n          {error}\n          <button onClick={loadItems} className=\"btn btn-sm btn-outline-danger ms-3\">\n            Reintentar\n          </button>\n        </div>\n      )}\n      \n      {/* Botón para crear */}\n      <div className=\"mb-3\">\n        <button \n          className=\"btn btn-primary\"\n          onClick={handleOpenModal}\n          disabled={loading}\n        >\n          Crear <Entidad>\n        </button>\n      </div>\n      \n      {/* Tabla de elementos */}\n      {loading ? (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"visually-hidden\">Cargando...</span>\n          </div>\n        </div>\n      ) : (\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th>Nombre</th>\n              <th>Elementos</th>\n              <th>Última Edición</th>\n              <th>Acciones</th>\n            </tr>\n          </thead>\n          <tbody>\n            {items.length === 0 ? (\n              <tr>\n                <td colSpan={4} className=\"text-center\">\n                  No hay <entidad>s disponibles\n                </td>\n              </tr>\n            ) : (\n              items.map(item => (\n                <tr key={item.id}>\n                  <td>\n                    {editId === item.id ? (\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={editName}\n                        onChange={(e) => setEditName(e.target.value)}\n                        autoFocus\n                      />\n                    ) : (\n                      item.name\n                    )}\n                  </td>\n                  <td>{item.itemCount}</td>\n                  <td>{new Date(item.editDate).toLocaleString()}</td>\n                  <td>\n                    {editId === item.id ? (\n                      <>\n                        <button \n                          className=\"btn btn-sm btn-success me-2\"\n                          onClick={() => handleSaveEdit(item.id)}\n                          disabled={loading}\n                        >\n                          Guardar\n                        </button>\n                        <button \n                          className=\"btn btn-sm btn-secondary\"\n                          onClick={handleCancelEdit}\n                          disabled={loading}\n                        >\n                          Cancelar\n                        </button>\n                      </>\n                    ) : (\n                      <>\n                        <button \n                          className=\"btn btn-sm btn-primary me-2\"\n                          onClick={() => handleEdit(item.id, item.name)}\n                          disabled={loading}\n                        >\n                          Editar\n                        </button>\n                        <button \n                          className=\"btn btn-sm btn-danger\"\n                          onClick={() => handleDelete(item.id)}\n                          disabled={loading}\n                        >\n                          Eliminar\n                        </button>\n                      </>\n                    )}\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      )}\n      \n      {/* Modal de creación */}\n      {isModalOpen && (\n        <div className=\"modal d-block\" tabIndex={-1} style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>\n          <div className=\"modal-dialog\">\n            <div className=\"modal-content\">\n              <div className=\"modal-header\">\n                <h5 className=\"modal-title\">Nueva <Entidad></h5>\n                <button type=\"button\" className=\"btn-close\" onClick={handleCloseModal}></button>\n              </div>\n              <form onSubmit={handleSubmit}>\n                <div className=\"modal-body\">\n                  <div className=\"mb-3\">\n                    <label htmlFor=\"name\" className=\"form-label\">Nombre</label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      id=\"name\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                      required\n                    />\n                  </div>\n                </div>\n                <div className=\"modal-footer\">\n                  <button type=\"button\" className=\"btn btn-secondary\" onClick={handleCloseModal}>Cancelar</button>\n                  <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>Crear</button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};"
    }
  ]
} 