---
description: Template and guidelines for 18_React_Model.tsx.
autoAttach: true
filePattern: "regex:.*Model\.tsx$"
---

# 18_React_Model.tsx Guideline

## Purpose
This rule automatically attaches when you are working on files that match **.*Model\.tsx$**.  
It embeds the full reference implementation so you can copy‑paste or use it as a template.

## Template code
```tsx
// EJEMPLO DE MODELO REACT/TYPESCRIPT (Presentation Layer - Frontend)
// Ruta: src/Presentation/TuProyecto.Web/src/models/categories/Category.model.ts

/**
 * Características clave de un modelo en el frontend (React/TypeScript):
 * 1. Define la estructura de datos para las entidades del dominio
 * 2. Utiliza interfaces TypeScript para definir contratos
 * 3. Puede incluir métodos para validación y transformación
 * 4. Modela solo la información necesaria para el frontend
 * 5. No tiene dependencias directas con el backend ni conocimiento sobre la persistencia
 */

// Interfaces base
export interface Entity {
  id: string;
  creationDate: string;
  editDate: string;
}

// Interfaces para operaciones CRUD
export interface CreateModel {
  id?: string; // Opcional por si se genera en el backend
}

export interface UpdateModel {
  id: string;
}

export interface QueryModel extends Entity {
  // Propiedades adicionales para listados/búsquedas
}

// Interfaces específicas para Categoría
export interface CategoryBase {
  name: string;
}

export interface CategoryCreateModel extends CreateModel, CategoryBase {}

export interface CategoryUpdateModel extends UpdateModel, CategoryBase {}

export interface CategoryReadModel extends Entity, CategoryBase {
  flows: FlowInCategoryModel[];
}

export interface CategoryQueryModel extends Entity, CategoryBase {
  flowCount: number;
}

// Interfaces para relaciones
export interface FlowInCategoryModel {
  id: string;
  name: string;
  nodeCount: number;
}

// Interfaces para operaciones específicas
export interface AddFlowToCategoryModel {
  flowId: string;
}

// Clase modelo para agregar comportamiento (opcional)
export class Category implements CategoryReadModel {
  id: string;
  name: string;
  creationDate: string;
  editDate: string;
  flows: FlowInCategoryModel[];

  constructor(data: CategoryReadModel) {
    this.id = data.id;
    this.name = data.name;
    this.creationDate = data.creationDate;
    this.editDate = data.editDate;
    this.flows = data.flows || [];
  }

  get flowCount(): number {
    return this.flows.length;
  }

  get totalNodeCount(): number {
    return this.flows.reduce((total, flow) => total + flow.nodeCount, 0);
  }

  get isEmpty(): boolean {
    return this.flows.length === 0;
  }

  // Métodos para manipular flujos localmente (antes de guardar)
  addFlow(flow: FlowInCategoryModel): void {
    const existingFlow = this.flows.find(f => f.id === flow.id);
    if (!existingFlow) {
      this.flows.push(flow);
    }
  }

  removeFlow(flowId: string): void {
    this.flows = this.flows.filter(flow => flow.id !== flowId);
  }

  // Métodos para validación
  isValid(): boolean {
    return !!this.name && this.name.trim().length > 0;
  }

  // Métodos para serialización
  toJSON(): CategoryReadModel {
    return {
      id: this.id,
      name: this.name,
      creationDate: this.creationDate,
      editDate: this.editDate,
      flows: this.flows
    };
  }

  toCreateModel(): CategoryCreateModel {
    return {
      id: this.id,
      name: this.name
    };
  }

  toUpdateModel(): CategoryUpdateModel {
    return {
      id: this.id,
      name: this.name
    };
  }
} 
```
