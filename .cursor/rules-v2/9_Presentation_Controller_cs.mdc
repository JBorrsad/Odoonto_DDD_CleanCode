---
description: Template and guidelines for 9_Presentation_Controller.cs.
autoAttach: true
filePattern: "regex:src/Presentation/.*/Controllers/.+Controller\.cs$"
---

# 9_Presentation_Controller.cs Guideline

## Purpose
This rule automatically attaches when you are working on files that match **src/Presentation/.*/Controllers/.+Controller\.cs$**.  
It embeds the full reference implementation so you can copy‑paste or use it as a template.

## Template code
```csharp
// EJEMPLO DE CONTROLADOR API (Presentation Layer)
// Ruta: src/Presentation/TuProyecto.UI.Server/Controllers/Categories/CategoriesController.cs

namespace TuProyecto.UI.Server.Controllers.Categories;

using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using TuProyecto.Application.DTO.Categories;
using TuProyecto.Application.Interfaces.Categories;

/// <summary>
/// Características clave de un controlador API en DDD:
/// 1. Hereda de ControllerBase para APIs
/// 2. Se decora con atributos de API
/// 3. Inyecta servicios de aplicación a través de interfaces
/// 4. Métodos delgados que simplemente llaman a servicios de aplicación
/// 5. Se enfoca solo en la comunicación HTTP, no en lógica de negocio
/// 6. Produce respuestas HTTP adecuadas
/// </summary>
[ApiController]
[Route("api/[controller]")]
public class CategoriesController : ControllerBase
{
    private readonly ICategoryAppService _categoryAppService;

    public CategoriesController(ICategoryAppService categoryAppService)
    {
        _categoryAppService = categoryAppService;
    }

    // Operación GET para obtener todas las categorías
    [HttpGet]
    public async Task<ActionResult<IEnumerable<CategoryQueryDto>>> GetAll()
    {
        IEnumerable<CategoryQueryDto> categories = await _categoryAppService.GetAll();
        return Ok(categories);
    }

    // Operación GET para obtener una categoría por su ID
    [HttpGet("{id}")]
    public async Task<ActionResult<CategoryReadDto>> GetById(Guid id)
    {
        try
        {
            CategoryReadDto category = await _categoryAppService.GetById(id);
            return Ok(category);
        }
        catch (Exception ex) when (ex.Message.Contains("not found"))
        {
            return NotFound(new { message = ex.Message });
        }
    }

    // Operación POST para crear una nueva categoría
    [HttpPost]
    public async Task<ActionResult> Create([FromBody] CategoryCreateDto categoryCreateDto)
    {
        try
        {
            await _categoryAppService.Create(categoryCreateDto);
            return CreatedAtAction(nameof(GetById), new { id = categoryCreateDto.Id }, null);
        }
        catch (Exception ex)
        {
            return BadRequest(new { message = ex.Message });
        }
    }

    // Operación PUT para actualizar una categoría existente
    [HttpPut("{id}")]
    public async Task<ActionResult> Update(Guid id, [FromBody] CategoryUpdateDto categoryUpdateDto)
    {
        try
        {
            await _categoryAppService.Update(id, categoryUpdateDto);
            return NoContent();
        }
        catch (Exception ex) when (ex.Message.Contains("not found"))
        {
            return NotFound(new { message = ex.Message });
        }
        catch (Exception ex)
        {
            return BadRequest(new { message = ex.Message });
        }
    }

    // Operación DELETE para eliminar una categoría
    [HttpDelete("{id}")]
    public async Task<ActionResult> Delete(Guid id)
    {
        try
        {
            await _categoryAppService.Remove(id);
            return NoContent();
        }
        catch (Exception ex) when (ex.Message.Contains("not found"))
        {
            return NotFound(new { message = ex.Message });
        }
        catch (Exception ex)
        {
            return BadRequest(new { message = ex.Message });
        }
    }

    // Operación POST para asociar un flujo a una categoría
    [HttpPost("{id}/flows")]
    public async Task<ActionResult> AddFlowToCategory(Guid id, [FromBody] AddFlowToCategoryDto addFlowDto)
    {
        try
        {
            await _categoryAppService.AddFlowToCategory(id, addFlowDto);
            return NoContent();
        }
        catch (Exception ex) when (ex.Message.Contains("not found"))
        {
            return NotFound(new { message = ex.Message });
        }
        catch (Exception ex)
        {
            return BadRequest(new { message = ex.Message });
        }
    }

    // Operación DELETE para desasociar un flujo de una categoría
    [HttpDelete("{categoryId}/flows/{flowId}")]
    public async Task<ActionResult> RemoveFlowFromCategory(Guid categoryId, Guid flowId)
    {
        try
        {
            await _categoryAppService.RemoveFlowFromCategory(categoryId, flowId);
            return NoContent();
        }
        catch (Exception ex) when (ex.Message.Contains("not found"))
        {
            return NotFound(new { message = ex.Message });
        }
        catch (Exception ex)
        {
            return BadRequest(new { message = ex.Message });
        }
    }
}
```
