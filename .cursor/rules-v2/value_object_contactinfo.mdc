---
description:
globs:
alwaysApply: false
---
---

# ContactInfo Value Object Guidelines

## Description
A value object that represents contact information including postal address, phone number, and email.

## When to apply
When implementing the `ContactInfo` value object or any code that handles contact information.

## Responsibilities
- Group contact-related information (address, phone, email)
- Validate each component according to business rules
- Provide immutability guarantees
- Implement value-based equality

## Code Example
```csharp
// VALUE OBJECT EXAMPLE: ContactInfo
// Ruta: src/Domain/Odoonto.Domain/Models/ValueObjects/ContactInfo.cs

namespace Odoonto.Domain.Models.ValueObjects;

using System;
using System.Text.RegularExpressions;
using Odoonto.Domain.Core.Models.Exceptions;

/// <summary>
/// Value Object que representa la información de contacto
/// Características clave:
/// 1. Inmutabilidad - sin setters
/// 2. Validación en el constructor
/// 3. Agrupación de datos relacionados (dirección, teléfono, email)
/// 4. Implementa Equals/GetHashCode basados en el valor
/// 5. Métodos Factory para creación con validación
/// </summary>
public sealed class ContactInfo : IEquatable<ContactInfo>
{
    // Propiedades inmutables (solo getters)
    public string PostalAddress { get; }
    public string PhoneNumber { get; }
    public string Email { get; }

    // Constructor privado - solo accesible a través del método factory
    private ContactInfo(string postalAddress, string phoneNumber, string email)
    {
        PostalAddress = postalAddress;
        PhoneNumber = phoneNumber;
        Email = email;
    }

    // Método Factory con validación
    public static ContactInfo Create(string postalAddress, string phoneNumber, string email)
    {
        // Validar dirección postal
        if (string.IsNullOrWhiteSpace(postalAddress))
        {
            throw new InvalidValueException("Postal address cannot be empty.");
        }

        // Validar teléfono
        if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            throw new InvalidValueException("Phone number cannot be empty.");
        }

        if (!IsValidPhoneNumber(phoneNumber))
        {
            throw new InvalidValueException("Invalid phone number format.");
        }

        // Validar email
        if (string.IsNullOrWhiteSpace(email))
        {
            throw new InvalidValueException("Email cannot be empty.");
        }

        if (!IsValidEmail(email))
        {
            throw new InvalidValueException("Invalid email format.");
        }

        // Normalizar valores antes de crear el objeto
        return new ContactInfo(
            postalAddress.Trim(),
            NormalizePhoneNumber(phoneNumber),
            email.Trim().ToLowerInvariant()
        );
    }

    // Método Factory para crear con opcional email
    public static ContactInfo CreateWithOptionalEmail(string postalAddress, string phoneNumber, string email = null)
    {
        // Validar dirección postal y teléfono como antes
        if (string.IsNullOrWhiteSpace(postalAddress))
        {
            throw new InvalidValueException("Postal address cannot be empty.");
        }

        if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            throw new InvalidValueException("Phone number cannot be empty.");
        }

        if (!IsValidPhoneNumber(phoneNumber))
        {
            throw new InvalidValueException("Invalid phone number format.");
        }

        // Validar email solo si se proporciona
        if (!string.IsNullOrWhiteSpace(email) && !IsValidEmail(email))
        {
            throw new InvalidValueException("Invalid email format.");
        }

        // Normalizar valores
        return new ContactInfo(
            postalAddress.Trim(),
            NormalizePhoneNumber(phoneNumber),
            string.IsNullOrWhiteSpace(email) ? null : email.Trim().ToLowerInvariant()
        );
    }

    // Método para crear una copia con dirección actualizada
    public ContactInfo WithPostalAddress(string newPostalAddress)
    {
        if (string.IsNullOrWhiteSpace(newPostalAddress))
        {
            throw new InvalidValueException("Postal address cannot be empty.");
        }

        return new ContactInfo(newPostalAddress.Trim(), PhoneNumber, Email);
    }

    // Método para crear una copia con teléfono actualizado
    public ContactInfo WithPhoneNumber(string newPhoneNumber)
    {
        if (string.IsNullOrWhiteSpace(newPhoneNumber))
        {
            throw new InvalidValueException("Phone number cannot be empty.");
        }

        if (!IsValidPhoneNumber(newPhoneNumber))
        {
            throw new InvalidValueException("Invalid phone number format.");
        }

        return new ContactInfo(PostalAddress, NormalizePhoneNumber(newPhoneNumber), Email);
    }

    // Método para crear una copia con email actualizado
    public ContactInfo WithEmail(string newEmail)
    {
        if (string.IsNullOrWhiteSpace(newEmail))
        {
            throw new InvalidValueException("Email cannot be empty.");
        }

        if (!IsValidEmail(newEmail))
        {
            throw new InvalidValueException("Invalid email format.");
        }

        return new ContactInfo(PostalAddress, PhoneNumber, newEmail.Trim().ToLowerInvariant());
    }

    // Validación de teléfono
    private static bool IsValidPhoneNumber(string phoneNumber)
    {
        // Simplificación: aceptar números, espacios, guiones, paréntesis y el símbolo +
        return Regex.IsMatch(phoneNumber, @"^[\d\s\-\(\)\+]+$");
    }

    // Normalización de teléfono (eliminar caracteres no numéricos)
    private static string NormalizePhoneNumber(string phoneNumber)
    {
        // Mantener solo los dígitos y el símbolo + si está al principio
        string normalized = Regex.Replace(phoneNumber.Trim(), @"[^\d\+]", "");
        
        // Asegurar que + solo aparece al principio
        if (normalized.Contains('+') && !normalized.StartsWith('+'))
        {
            normalized = normalized.Replace("+", "");
        }
        
        return normalized;
    }

    // Validación de email
    private static bool IsValidEmail(string email)
    {
        try
        {
            // Usar una expresión regular simplificada para email
            var regex = new Regex(@"^[^@\s]+@[^@\s]+\.[^@\s]+$");
            return regex.IsMatch(email);
        }
        catch
        {
            return false;
        }
    }

    // Representación como string
    public override string ToString()
    {
        return $"Address: {PostalAddress}, Phone: {PhoneNumber}, Email: {Email ?? "N/A"}";
    }

    // Implementación de IEquatable<T>
    public bool Equals(ContactInfo other)
    {
        if (other is null)
            return false;

        return string.Equals(PostalAddress, other.PostalAddress, StringComparison.OrdinalIgnoreCase) &&
               string.Equals(PhoneNumber, other.PhoneNumber, StringComparison.Ordinal) &&
               string.Equals(Email, other.Email, StringComparison.OrdinalIgnoreCase);
    }

    // Sobreescritura de Object.Equals
    public override bool Equals(object obj)
    {
        return obj is ContactInfo other && Equals(other);
    }

    // Sobreescritura de Object.GetHashCode
    public override int GetHashCode()
    {
        return HashCode.Combine(
            PostalAddress?.ToUpperInvariant(),
            PhoneNumber,
            Email?.ToUpperInvariant());
    }

    // Operadores de igualdad
    public static bool operator ==(ContactInfo left, ContactInfo right)
    {
        if (left is null)
            return right is null;

        return left.Equals(right);
    }

    public static bool operator !=(ContactInfo left, ContactInfo right)
    {
        return !(left == right);
    }
}
