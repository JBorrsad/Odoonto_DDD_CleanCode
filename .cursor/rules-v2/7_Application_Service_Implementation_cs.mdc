---
description: Template and guidelines for 7_Application_Service_Implementation.cs.
autoAttach: true
filePattern: "regex:src/Application/.*/Services/.+Service\.cs$"
---

# 7_Application_Service_Implementation.cs Guideline

## Purpose
This rule automatically attaches when you are working on files that match **src/Application/.*/Services/.+Service\.cs$**.  
It embeds the full reference implementation so you can copy‑paste or use it as a template.

## Template code
```csharp
// EJEMPLO DE IMPLEMENTACIÓN DE SERVICIO DE APLICACIÓN (Application Layer)
// Ruta: src/Application/TuProyecto.Application/Services/Categories/CategoryAppService.cs

namespace TuProyecto.Application.Services.Categories;

using global::AutoMapper;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using TuProyecto.Application.DTO.Categories;
using TuProyecto.Application.Interfaces.Categories;
using TuProyecto.Domain.Core.Models.Exceptions;
using TuProyecto.Domain.Models.Categories;
using TuProyecto.Domain.Models.Flows;
using TuProyecto.Domain.Repositories.Categories;
using TuProyecto.Domain.Repositories.Flows;

/// <summary>
/// Características clave de un servicio de aplicación en DDD:
/// 1. Implementa la interfaz de servicio de aplicación
/// 2. Coordina operaciones entre entidades y repositorios
/// 3. Usa AutoMapper para mapear entre entidades y DTOs
/// 4. Delega la lógica de negocio a las entidades de dominio
/// 5. Gestiona transacciones y validaciones de alto nivel
/// </summary>
public class CategoryAppService : ICategoryAppService
{
    // Inyección de dependencias
    private readonly ICategoryRepository _categoryRepository;
    private readonly IFlowRepository _flowRepository;
    private readonly IMapper _mapper;

    public CategoryAppService(
        ICategoryRepository categoryRepository,
        IFlowRepository flowRepository,
        IMapper mapper)
    {
        _categoryRepository = categoryRepository;
        _flowRepository = flowRepository;
        _mapper = mapper;
    }

    // Implementación de método de obtención con inclusión de relaciones
    public async Task<CategoryReadDto> GetById(Guid categoryId)
    {
        // Usa métodos de extensión para incluir relaciones
        Category category = await _categoryRepository.GetByIdOrThrow(categoryId, query =>
            query.Include(c => c.Flows)
                 .ThenInclude(f => f.Nodes));

        // Mapeo de entidad a DTO
        return _mapper.Map<Category, CategoryReadDto>(category);
    }

    // Implementación de método de listado
    public async Task<IEnumerable<CategoryQueryDto>> GetAll()
    {
        // Obtiene entidades con inclusión de relaciones
        IEnumerable<Category> categories = await _categoryRepository.GetAll(query =>
            query.Include(c => c.Flows));

        // Mapeo de entidades a DTOs
        return _mapper.Map<IEnumerable<Category>, IEnumerable<CategoryQueryDto>>(categories);
    }

    // Implementación de método de creación
    public Task Create(CategoryCreateDto data)
    {
        // Validación básica
        if (data is null)
        {
            throw new InvalidValueException("The request is not valid.");
        }

        // Crear entidad usando método factory
        Category category = Category.Create(data.Id);

        // Establecer propiedades usando métodos de comportamiento
        category.SetName(data.Name);

        // Persistir utilizando el repositorio
        return _categoryRepository.Create(category);
    }

    // Implementación de método de eliminación
    public async Task Remove(Guid categoryId)
    {
        // Obtener la entidad
        Category category = await _categoryRepository.GetByIdOrThrow(categoryId);

        // Eliminar utilizando el repositorio
        _categoryRepository.Delete(category);
    }

    // Implementación de método de actualización
    public async Task Update(Guid categoryId, CategoryUpdateDto data)
    {
        // Validación básica
        if (data is null)
        {
            throw new InvalidValueException("The request is not valid.");
        }

        // Obtener la entidad
        Category category = await _categoryRepository.GetByIdOrThrow(categoryId);

        // Actualizar propiedades usando métodos de comportamiento
        category.SetName(data.Name);

        // Persistir usando el repositorio
        _categoryRepository.Update(category);
    }

    // Implementación de método de caso de uso específico
    public async Task AddFlowToCategory(Guid categoryId, AddFlowToCategoryDto data)
    {
        // Validación básica
        if (data is null)
        {
            throw new InvalidValueException("The request is not valid.");
        }

        // Obtener entidades necesarias
        Category category = await _categoryRepository.GetByIdOrThrow(categoryId, query =>
            query.Include(c => c.Flows));
        Flow flow = await _flowRepository.GetByIdOrThrow(data.FlowId);

        // Ejecutar lógica de negocio en la entidad
        category.AddFlow(flow);

        // Persistir cambios
        _categoryRepository.Update(category);
    }

    // Implementación de método de caso de uso específico
    public async Task RemoveFlowFromCategory(Guid categoryId, Guid flowId)
    {
        // Obtener entidades necesarias
        Category category = await _categoryRepository.GetByIdOrThrow(categoryId, query =>
            query.Include(c => c.Flow
```
