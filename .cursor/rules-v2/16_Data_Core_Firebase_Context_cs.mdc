---
description: Template and guidelines for 16_Data_Core_Firebase_Context.cs.
autoAttach: true
filePattern: "regex:.*Firebase.*Context\.cs$"
---

# 16_Data_Core_Firebase_Context.cs Guideline

## Purpose
This rule automatically attaches when you are working on files that match **.*Firebase.*Context\.cs$**.  
It embeds the full reference implementation so you can copy‑paste or use it as a template.

## Template code
```csharp
// EJEMPLO DE CONTEXTO FIREBASE (Data Core Layer)
// Ruta: src/Data/TuProyecto.Data.Core/Firebase/FirebaseDbContext.cs

namespace TuProyecto.Data.Core.Firebase;

using System;
using System.IO;
using Google.Cloud.Firestore;
using Microsoft.Extensions.Configuration;

/// <summary>
/// Características clave de un contexto Firebase en DDD:
/// 1. Proporciona acceso centralizado a Firestore
/// 2. Gestiona la configuración y credenciales de Firebase
/// 3. Se inyecta en los repositorios
/// 4. Singleton para toda la aplicación
/// 5. Gestiona la inicialización de Firebase
/// </summary>
public class FirebaseDbContext
{
    public FirestoreDb FirestoreDb { get; private set; }

    public FirebaseDbContext(IConfiguration configuration)
    {
        Initialize(configuration);
    }

    private void Initialize(IConfiguration configuration)
    {
        try
        {
            // Obtener la configuración desde appsettings.json o variables de entorno
            string projectId = configuration["Firebase:ProjectId"];
            string credentialsPath = configuration["Firebase:CredentialsPath"];

            // Hay múltiples formas de autenticarse con Firebase:

            // 1. Usando un archivo de credenciales JSON
            if (!string.IsNullOrEmpty(credentialsPath))
            {
                Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", credentialsPath);
                FirestoreDb = FirestoreDb.Create(projectId);
                return;
            }

            // 2. Usando credenciales en línea (ej: para entornos donde no se puede usar un archivo)
            string credentials = configuration["Firebase:Credentials"];
            if (!string.IsNullOrEmpty(credentials))
            {
                // Convertir el string de credenciales a un archivo temporal
                string tempPath = Path.Combine(Path.GetTempPath(), $"firebase_credentials_{Guid.NewGuid()}.json");
                File.WriteAllText(tempPath, credentials);

                Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", tempPath);
                FirestoreDb = FirestoreDb.Create(projectId);

                // Limpieza del archivo temporal
                File.Delete(tempPath);
                return;
            }

            // 3. Detección automática de credenciales (para entornos de Google Cloud)
            FirestoreDb = FirestoreDb.Create(projectId);
        }
        catch (Exception ex)
        {
            throw new ApplicationException("Error initializing Firebase connection", ex);
        }
    }

    // Métodos de ayuda para operaciones comunes

    public CollectionReference GetCollection(string collectionName)
    {
        return FirestoreDb.Collection(collectionName);
    }

    public DocumentReference GetDocument(string collectionName, string documentId)
    {
        return FirestoreDb.Collection(collectionName).Document(documentId);
    }
}
```
