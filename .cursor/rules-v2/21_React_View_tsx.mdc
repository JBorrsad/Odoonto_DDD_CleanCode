---
description: Template and guidelines for 21_React_View.tsx.
autoAttach: true
filePattern: "regex:.*View\.tsx$"
---

# 21_React_View.tsx Guideline

## Purpose
This rule automatically attaches when you are working on files that match **.*View\.tsx$**.  
It embeds the full reference implementation so you can copy‑paste or use it as a template.

## Template code
```tsx
// EJEMPLO DE VISTA REACT/TYPESCRIPT (Presentation Layer - Frontend)
// Ruta: src/Presentation/TuProyecto.Web/src/views/pages/categories/CategoryList.tsx

import React, { useState } from 'react';
import { CategoryCreateModel } from '../../../models/categories/Category.model';
import { useCategoryPresenter } from '../../../presenters/categories/CategoryPresenter';

/**
 * Características clave de una vista en el frontend (patrón MVP):
 * 1. Es un componente de React responsable únicamente de la presentación
 * 2. Delega toda la lógica al presentador
 * 3. Se comunica con el presentador mediante hooks/props/callbacks
 * 4. Maneja solo el estado relacionado con la UI local
 * 5. No accede directamente a servicios API ni maneja lógica de negocio
 */
export const CategoryList: React.FC = () => {
  // Estado local de UI
  const [newCategoryName, setNewCategoryName] = useState<string>('');
  const [createModalOpen, setCreateModalOpen] = useState<boolean>(false);
  const [editingCategory, setEditingCategory] = useState<string | null>(null);
  const [editName, setEditName] = useState<string>('');

  // Usar el presentador que contiene toda la lógica de comunicación con la API
  const {
    // Estado
    categories,
    loading,
    error,
    
    // Métodos
    loadCategories,
    createCategory,
    updateCategory,
    deleteCategory
  } = useCategoryPresenter();

  // Manejadores de eventos UI
  const handleCreateModalOpen = () => {
    setNewCategoryName('');
    setCreateModalOpen(true);
  };

  const handleCreateModalClose = () => {
    setCreateModalOpen(false);
  };

  const handleCreateSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!newCategoryName.trim()) {
      return; // Validación básica local
    }
    
    try {
      const newCategory: CategoryCreateModel = {
        id: crypto.randomUUID(), // Generar ID en el cliente
        name: newCategoryName
      };
      
      await createCategory(newCategory);
      handleCreateModalClose();
    } catch (err) {
      // El error ya está manejado por el presentador
      // Aquí solo manejamos lo específico de la UI
      console.error('Error al crear categoría desde la vista:', err);
    }
  };

  const handleEditClick = (id: string, name: string) => {
    setEditingCategory(id);
    setEditName(name);
  };

  const handleEditCancel = () => {
    setEditingCategory(null);
    setEditName('');
  };

  const handleEditSubmit = async (id: string) => {
    if (!editName.trim()) {
      return; // Validación básica local
    }
    
    try {
      await updateCategory(id, { id, name: editName });
      setEditingCategory(null);
    } catch (err) {
      // El error ya está manejado por el presentador
      console.error('Error al actualizar categoría desde la vista:', err);
    }
  };

  const handleDeleteClick = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar esta categoría?')) {
      try {
        await deleteCategory(id);
      } catch (err) {
        // El error ya está manejado por el presentador
        console.error('Error al eliminar categoría desde la vista:', err);
      }
    }
  };

  // Renderizar UI
  return (
    <div className="category-list-container">
      <h1>Categorías</h1>
      
      {/* Error message */}
      {error && (
        <div className="error-message">
          <p>{error}</p>
          <button onClick={loadCategories}>Reintentar</button>
        </div>
      )}
      
      {/* Acciones */}
      <div className="actions">
        <button 
          className="create-button"
          onClick={handleCreateModalOpen}
          disabled={loading}
        >
          Añadir Categoría
        </button>
      </div>
      
      {/* Tabla de categorías */}
      {loading ? (
        <div className="loading-spinner">Cargando...</div>
      ) : (
        <table className="categories-table">
          <thead>
            <tr>
              <th>Nombre</th>
              <th>Flujos</th>
              <th>Última Edición</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {categories.length === 0 ? (
              <tr>
                <td colSpan={4} className="no-data">
                  No hay categorías disponibles
                </td>
              </tr>
            ) : (
              categories.map(category => (
                <tr key={category.id}>
                  <td>
                    {editingCategory === category.id ? (
                      <input
                        type="text"
                        value={editName}
                        onChange={(e) => setEditName(e.target.value)}
                        autoFocus
                      />
                    ) : (
                      <span>{category.name}</span>
                    )}
                  </td>
                  <td>{category.flowCount}</td>
                  <td>{new Date(category.editDate).toLocaleString()}</td>
            
```
