---
description: Template and guidelines for 00_README.md.
autoAttach: true
filePattern: "regex:.*README\.md$"
---

# 00_README.md Guideline

## Purpose
This rule automatically attaches when you are working on files that match **.*README\.md$**.  
It embeds the full reference implementation so you can copy‑paste or use it as a template.

## Template code
```
# Ejemplos de Código para Arquitectura DDD

Este directorio contiene ejemplos de código para cada componente principal de una arquitectura Domain-Driven Design (DDD), basados en el proyecto WF.Mimetic.

## Propósito

Los ejemplos están diseñados para:

1. Servir como referencia para la implementación de patrones DDD en nuevos proyectos.
2. Proporcionar plantillas para Cursor que puedan usarse para generar automáticamente archivos con la estructura correcta.
3. Ilustrar las mejores prácticas observadas en el proyecto WF.Mimetic.
4. Ayudar a comprender la estructura y responsabilidades de cada componente en la arquitectura.

## Estructura de Archivos

Cada archivo representa un componente específico de la arquitectura DDD:

### Capa de Dominio (Core)

- `11_Domain_Core_Entity.cs`: Clase base para todas las entidades.
- `12_Domain_Core_Repository_Interface.cs`: Interfaz genérica para repositorios.

### Capa de Dominio

- `1_Domain_Entity.cs`: Ejemplo de entidad de dominio (Category).
- `2_Domain_Repository_Interface.cs`: Ejemplo de interfaz de repositorio específica.

### Capa de Datos

- `13_Data_Core_Repository_Implementation.cs`: Implementación base de repositorio.
- `3_Data_Repository_Implementation.cs`: Implementación concreta de repositorio.
- `4_Data_Entity_Mapping.cs`: Configuración de mapeo para Entity Framework Core.

### Capa de Aplicación

- `5_Application_DTO.cs`: Objetos de transferencia de datos.
- `6_Application_Service_Interface.cs`: Interfaz de servicio de aplicación.
- `7_Application_Service_Implementation.cs`: Implementación de servicio de aplicación.
- `8_Application_AutoMapper_Profile.cs`: Perfil de AutoMapper.

### Capa de Presentación

- `9_Presentation_Controller.cs`: Controlador API.

### Capa de Infraestructura

- `10_Infrastructure_Inyector.cs`: Configuración de inyección de dependencias.

## Cómo Usar Estos Ejemplos

1. **Para Referencia**: Utiliza estos archivos como referencia al implementar componentes similares en tu propio proyecto DDD.

2. **Como Plantillas Cursor**: Las plantillas pueden configurarse en Cursor como reglas para facilitar la creación de nuevos archivos que sigan la estructura DDD.

3. **Para Comprender el Flujo**: Estudia los ejemplos para entender cómo fluyen los datos entre las diferentes capas (ver `src/DDD_Flujos_Comunicacion.txt`).

4. **Para Seguir los Patrones**: Observa los patrones comunes que se repiten a través de las distintas implementaciones.

## Relación con la Arquitectura DDD

Estos ejemplos ilustran los principios fundamentales de DDD:

- **Entidades ricas con comportamiento**: Las entidades encapsulan comportamiento y reglas de negocio.
- **Encapsulamiento**: Propiedades con getters públicos y setters privados.
- **Separación de responsabilidades**: Cada capa tiene responsabilidades claramente definidas.
- **Inyección de dependencias**: Todos los componentes se comunican a través de interfaces.
- **Repository pattern**: Abstracción del acceso a datos.
- **DTOs para transferencia**: Objetos específicos para transferir datos entre capas.

Para una explicación detallada de la arquitectura, consulta:

- `src/DDD_Estructura_Proyecto.txt`: Descripción de la estructura general
- `src/DDD_Flujos_Comunicacion.txt`: Explicación de los flujos de comunicación
- `src/DDD_Reglas_Cursor.txt`: Reglas para implementar en Cursor

```
