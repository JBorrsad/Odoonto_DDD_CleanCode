# Reglas para Cursor: Implementación de Domain-Driven Design

## 1. Reglas para Estructura de Carpetas

```
{
  "name": "DDD-estructura-carpetas",
  "description": "Estructura de carpetas para proyectos Domain-Driven Design",
  "prompt": "Crea la estructura de carpetas para un proyecto .NET siguiendo Domain-Driven Design",
  "editorPrompt": "¿Deseas crear una estructura de carpetas para un proyecto DDD similar a WF.Mimetic?",
  "pattern": [
    {
      "dir": "src/Domain/${PROYECTO}.Domain/Models",
      "autocreate": true
    },
    {
      "dir": "src/Domain/${PROYECTO}.Domain/Repositories",
      "autocreate": true
    },
    {
      "dir": "src/Domain/${PROYECTO}.Domain/Interfaces",
      "autocreate": true
    },
    {
      "dir": "src/Domain/${PROYECTO}.Domain.Core/Models",
      "autocreate": true
    },
    {
      "dir": "src/Application/${PROYECTO}.Application/Services",
      "autocreate": true
    },
    {
      "dir": "src/Application/${PROYECTO}.Application/DTO",
      "autocreate": true
    },
    {
      "dir": "src/Application/${PROYECTO}.Application/Interfaces",
      "autocreate": true
    },
    {
      "dir": "src/Application/${PROYECTO}.Application/AutoMapper",
      "autocreate": true
    },
    {
      "dir": "src/Data/${PROYECTO}.Data/Repositories",
      "autocreate": true
    },
    {
      "dir": "src/Data/${PROYECTO}.Data/Mappings",
      "autocreate": true
    },
    {
      "dir": "src/Data/${PROYECTO}.Data.Contexts/Contexts",
      "autocreate": true
    },
    {
      "dir": "src/Infraestructure/${PROYECTO}.Infraestructure.InversionOfControl/Inyectors",
      "autocreate": true
    },
    {
      "dir": "src/Presentation/${PROYECTO}.UI.Server/Controllers",
      "autocreate": true
    }
  ]
}
```

## 2. Reglas para Entidades de Dominio

```
{
  "name": "DDD-entidad-dominio",
  "description": "Plantilla para entidades de dominio",
  "prompt": "Crea una entidad de dominio para DDD",
  "editorPrompt": "¿Deseas crear una entidad de dominio con encapsulamiento y validaciones?",
  "filePattern": "src/Domain/${PROYECTO}.Domain/Models/**/*.cs",
  "template": "namespace ${PROYECTO}.Domain.Models.${CARPETA};\n\nusing System;\nusing ${PROYECTO}.Domain.Core.Models;\nusing ${PROYECTO}.Domain.Core.Models.Exceptions;\n\npublic class ${NOMBRE} : Entity\n{\n    public string Name { get; private set; }\n\n    private ${NOMBRE}(Guid id) : base(id)\n    {\n        Name = null;\n    }\n\n    public static ${NOMBRE} Create(Guid id)\n    {\n        if (id.Equals(Guid.Empty))\n        {\n            throw new InvalidValueException(\"The ${NOMBRE} id can't be empty.\");\n        }\n\n        ${NOMBRE} entity = new ${NOMBRE}(id);\n        entity.UpdateEditDate();\n        return entity;\n    }\n\n    public void SetName(string name)\n    {\n        if (string.IsNullOrWhiteSpace(name))\n        {\n            throw new InvalidValueException(\"The ${NOMBRE} name can't be null/empty.\");\n        }\n\n        Name = name;\n        UpdateEditDate();\n    }\n}"
}
```

## 3. Reglas para Interfaces de Repositorio

```
{
  "name": "DDD-interfaz-repositorio",
  "description": "Plantilla para interfaces de repositorio",
  "prompt": "Crea una interfaz de repositorio para DDD",
  "editorPrompt": "¿Deseas crear una interfaz de repositorio para una entidad?",
  "filePattern": "src/Domain/${PROYECTO}.Domain/Repositories/**/*.cs",
  "template": "namespace ${PROYECTO}.Domain.Repositories.${CARPETA};\n\nusing System;\nusing System.Threading.Tasks;\nusing ${PROYECTO}.Domain.Core.Repositories;\nusing ${PROYECTO}.Domain.Models.${CARPETA};\n\npublic interface I${ENTIDAD}Repository : IRepository<${ENTIDAD}>\n{\n    // Métodos específicos para ${ENTIDAD}\n}"
}
```

## 4. Reglas para Implementación de Repositorios

```
{
  "name": "DDD-implementacion-repositorio",
  "description": "Plantilla para implementaciones de repositorio",
  "prompt": "Crea una implementación de repositorio para DDD",
  "editorPrompt": "¿Deseas crear una implementación de repositorio para una entidad?",
  "filePattern": "src/Data/${PROYECTO}.Data/Repositories/**/*.cs",
  "template": "namespace ${PROYECTO}.Data.Repositories.${CARPETA};\n\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Threading.Tasks;\nusing ${PROYECTO}.Data.Core.Contexts;\nusing ${PROYECTO}.Data.Core.Repositories;\nusing ${PROYECTO}.Domain.Core.Models.Exceptions;\nusing ${PROYECTO}.Domain.Models.${CARPETA};\nusing ${PROYECTO}.Domain.Repositories.${CARPETA};\n\npublic class ${ENTIDAD}Repository : Repository<${ENTIDAD}>, I${ENTIDAD}Repository\n{\n    private readonly ApplicationContext _context;\n\n    public ${ENTIDAD}Repository(ApplicationContext context) : base(context)\n    {\n        _context = context;\n    }\n\n    public override Task<${ENTIDAD}> GetById(Guid id)\n    {\n        return _context.Set<${ENTIDAD}>()\n            .FirstOrDefaultAsync(entity => entity.Id == id);\n    }\n}"
}
```

## 5. Reglas para DTOs

```
{
  "name": "DDD-dto",
  "description": "Plantilla para DTOs",
  "prompt": "Crea un DTO para DDD",
  "editorPrompt": "¿Deseas crear un DTO para transferencia de datos?",
  "filePattern": "src/Application/${PROYECTO}.Application/DTO/**/*.cs",
  "template": "namespace ${PROYECTO}.Application.DTO.${CARPETA};\n\nusing System;\n\npublic class ${ENTIDAD}${TIPO}Dto\n{\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    // Propiedades adicionales según ${TIPO} (Create/Read/Update/Query)\n}"
}
```

## 6. Reglas para Interfaces de Servicios de Aplicación

```
{
  "name": "DDD-interfaz-servicio",
  "description": "Plantilla para interfaces de servicios de aplicación",
  "prompt": "Crea una interfaz de servicio de aplicación para DDD",
  "editorPrompt": "¿Deseas crear una interfaz de servicio de aplicación?",
  "filePattern": "src/Application/${PROYECTO}.Application/Interfaces/**/*.cs",
  "template": "namespace ${PROYECTO}.Application.Interfaces.${CARPETA};\n\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing ${PROYECTO}.Application.DTO.${CARPETA};\n\npublic interface I${ENTIDAD}AppService\n{\n    Task Create(${ENTIDAD}CreateDto data);\n    Task Update(Guid ${ENTIDAD}Id, ${ENTIDAD}UpdateDto data);\n    Task Remove(Guid ${ENTIDAD}Id);\n    Task<${ENTIDAD}ReadDto> GetById(Guid ${ENTIDAD}Id);\n    Task<IEnumerable<${ENTIDAD}QueryDto>> GetAll();\n}"
}
```

## 7. Reglas para Implementación de Servicios de Aplicación

```
{
  "name": "DDD-implementacion-servicio",
  "description": "Plantilla para implementaciones de servicios de aplicación",
  "prompt": "Crea una implementación de servicio de aplicación para DDD",
  "editorPrompt": "¿Deseas crear una implementación de servicio de aplicación?",
  "filePattern": "src/Application/${PROYECTO}.Application/Services/**/*.cs",
  "template": "namespace ${PROYECTO}.Application.Services.${CARPETA};\n\nusing global::AutoMapper;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing ${PROYECTO}.Application.DTO.${CARPETA};\nusing ${PROYECTO}.Application.Interfaces.${CARPETA};\nusing ${PROYECTO}.Domain.Core.Models.Exceptions;\nusing ${PROYECTO}.Domain.Models.${CARPETA};\nusing ${PROYECTO}.Domain.Repositories.${CARPETA};\n\npublic class ${ENTIDAD}AppService : I${ENTIDAD}AppService\n{\n    private readonly I${ENTIDAD}Repository _${ENTIDAD.toLowerCase()}Repository;\n    private readonly IMapper _mapper;\n\n    public ${ENTIDAD}AppService(I${ENTIDAD}Repository ${ENTIDAD.toLowerCase()}Repository, IMapper mapper)\n    {\n        _${ENTIDAD.toLowerCase()}Repository = ${ENTIDAD.toLowerCase()}Repository;\n        _mapper = mapper;\n    }\n\n    public async Task<${ENTIDAD}ReadDto> GetById(Guid ${ENTIDAD.toLowerCase()}Id)\n    {\n        ${ENTIDAD} ${ENTIDAD.toLowerCase()} = await _${ENTIDAD.toLowerCase()}Repository.GetByIdOrThrow(${ENTIDAD.toLowerCase()}Id);\n        return _mapper.Map<${ENTIDAD}, ${ENTIDAD}ReadDto>(${ENTIDAD.toLowerCase()});\n    }\n\n    public async Task<IEnumerable<${ENTIDAD}QueryDto>> GetAll()\n    {\n        IEnumerable<${ENTIDAD}> ${ENTIDAD.toLowerCase()}s = await _${ENTIDAD.toLowerCase()}Repository.GetAll();\n        return _mapper.Map<IEnumerable<${ENTIDAD}>, IEnumerable<${ENTIDAD}QueryDto>>(${ENTIDAD.toLowerCase()}s);\n    }\n\n    public Task Create(${ENTIDAD}CreateDto data)\n    {\n        if (data is null)\n        {\n            throw new InvalidValueException(\"The request is not valid.\");\n        }\n        \n        ${ENTIDAD} ${ENTIDAD.toLowerCase()} = ${ENTIDAD}.Create(data.Id);\n        ${ENTIDAD.toLowerCase()}.SetName(data.Name);\n        \n        return _${ENTIDAD.toLowerCase()}Repository.Create(${ENTIDAD.toLowerCase()});\n    }\n\n    public async Task Remove(Guid ${ENTIDAD.toLowerCase()}Id)\n    {\n        ${ENTIDAD} ${ENTIDAD.toLowerCase()} = await _${ENTIDAD.toLowerCase()}Repository.GetByIdOrThrow(${ENTIDAD.toLowerCase()}Id);\n        _${ENTIDAD.toLowerCase()}Repository.Delete(${ENTIDAD.toLowerCase()});\n    }\n\n    public async Task Update(Guid ${ENTIDAD.toLowerCase()}Id, ${ENTIDAD}UpdateDto data)\n    {\n        if (data is null)\n        {\n            throw new InvalidValueException(\"The request is not valid.\");\n        }\n\n        ${ENTIDAD} ${ENTIDAD.toLowerCase()} = await _${ENTIDAD.toLowerCase()}Repository.GetByIdOrThrow(${ENTIDAD.toLowerCase()}Id);\n        ${ENTIDAD.toLowerCase()}.SetName(data.Name);\n\n        _${ENTIDAD.toLowerCase()}Repository.Update(${ENTIDAD.toLowerCase()});\n    }\n}"
}
```

## 8. Reglas para Controladores

```
{
  "name": "DDD-controlador",
  "description": "Plantilla para controladores API",
  "prompt": "Crea un controlador API para DDD",
  "editorPrompt": "¿Deseas crear un controlador API para un recurso?",
  "filePattern": "src/Presentation/${PROYECTO}.UI.Server/Controllers/**/*.cs",
  "template": "namespace ${PROYECTO}.UI.Server.Controllers.${CARPETA};\n\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing ${PROYECTO}.Application.DTO.${CARPETA};\nusing ${PROYECTO}.Application.Interfaces.${CARPETA};\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class ${ENTIDAD}Controller : ControllerBase\n{\n    private readonly I${ENTIDAD}AppService _${ENTIDAD.toLowerCase()}AppService;\n\n    public ${ENTIDAD}Controller(I${ENTIDAD}AppService ${ENTIDAD.toLowerCase()}AppService)\n    {\n        _${ENTIDAD.toLowerCase()}AppService = ${ENTIDAD.toLowerCase()}AppService;\n    }\n\n    [HttpGet]\n    public async Task<ActionResult<IEnumerable<${ENTIDAD}QueryDto>>> GetAll()\n    {\n        return Ok(await _${ENTIDAD.toLowerCase()}AppService.GetAll());\n    }\n\n    [HttpGet(\"{id}\")]\n    public async Task<ActionResult<${ENTIDAD}ReadDto>> GetById(Guid id)\n    {\n        return Ok(await _${ENTIDAD.toLowerCase()}AppService.GetById(id));\n    }\n\n    [HttpPost]\n    public async Task<ActionResult> Create([FromBody] ${ENTIDAD}CreateDto data)\n    {\n        await _${ENTIDAD.toLowerCase()}AppService.Create(data);\n        return CreatedAtAction(nameof(GetById), new { id = data.Id }, null);\n    }\n\n    [HttpPut(\"{id}\")]\n    public async Task<ActionResult> Update(Guid id, [FromBody] ${ENTIDAD}UpdateDto data)\n    {\n        await _${ENTIDAD.toLowerCase()}AppService.Update(id, data);\n        return NoContent();\n    }\n\n    [HttpDelete(\"{id}\")]\n    public async Task<ActionResult> Delete(Guid id)\n    {\n        await _${ENTIDAD.toLowerCase()}AppService.Remove(id);\n        return NoContent();\n    }\n}"
}
```

## 9. Reglas para AutoMapper

```
{
  "name": "DDD-mapper-profile",
  "description": "Plantilla para perfiles de AutoMapper",
  "prompt": "Crea un perfil de AutoMapper para DDD",
  "editorPrompt": "¿Deseas crear un perfil de AutoMapper para una entidad?",
  "filePattern": "src/Application/${PROYECTO}.Application/AutoMapper/**/*.cs",
  "template": "namespace ${PROYECTO}.Application.AutoMapper.${CARPETA};\n\nusing AutoMapper;\nusing ${PROYECTO}.Application.DTO.${CARPETA};\nusing ${PROYECTO}.Domain.Models.${CARPETA};\n\npublic class ${ENTIDAD}MappingProfile : Profile\n{\n    public ${ENTIDAD}MappingProfile()\n    {\n        CreateMap<${ENTIDAD}, ${ENTIDAD}ReadDto>();\n        CreateMap<${ENTIDAD}, ${ENTIDAD}QueryDto>();\n        CreateMap<${ENTIDAD}CreateDto, ${ENTIDAD}>();\n        CreateMap<${ENTIDAD}UpdateDto, ${ENTIDAD}>();\n    }\n}"
}
```

## 10. Reglas para Validación de Código

```
{
  "name": "DDD-validacion-dominio",
  "description": "Verifica que las entidades de dominio cumplan con las reglas DDD",
  "prompt": "Verifica que esta entidad cumpla con los principios DDD",
  "filePattern": "src/Domain/${PROYECTO}.Domain/Models/**/*.cs",
  "check": [
    {
      "pattern": "public\\s+[\\w<>]+\\s+\\w+\\s*{\\s*get;\\s*private\\s+set;\\s*}",
      "message": "Las propiedades deben tener getters públicos y setters privados para encapsulamiento",
      "severity": "warning"
    },
    {
      "pattern": ":\\s*Entity",
      "message": "Las entidades de dominio deben heredar de la clase Entity",
      "severity": "error",
      "required": true
    },
    {
      "pattern": "throw\\s+new\\s+\\w+Exception",
      "message": "Las entidades deben validar sus reglas de negocio internamente lanzando excepciones",
      "severity": "warning"
    }
  ]
}
```

## 11. Reglas para Validación de Servicios de Aplicación

```
{
  "name": "DDD-validacion-servicio",
  "description": "Verifica que los servicios de aplicación cumplan con las reglas DDD",
  "prompt": "Verifica que este servicio cumpla con los principios DDD",
  "filePattern": "src/Application/${PROYECTO}.Application/Services/**/*.cs",
  "check": [
    {
      "pattern": "private\\s+readonly\\s+I\\w+Repository",
      "message": "Los servicios deben inyectar repositorios a través de sus interfaces",
      "severity": "error",
      "required": true
    },
    {
      "pattern": "private\\s+readonly\\s+IMapper",
      "message": "Los servicios deben usar AutoMapper para mapeo entre entidades y DTOs",
      "severity": "warning",
      "required": true
    },
    {
      "notPattern": "\\w+\\s+=\\s+new\\s+\\w+\\(",
      "message": "Los servicios no deben crear instancias de clases concretas (excepto DTOs), usa inyección de dependencias",
      "severity": "warning"
    }
  ]
}
```

## 12. Reglas para Validación de Controladores

```
{
  "name": "DDD-validacion-controlador",
  "description": "Verifica que los controladores cumplan con las reglas DDD",
  "prompt": "Verifica que este controlador cumpla con los principios DDD",
  "filePattern": "src/Presentation/${PROYECTO}.UI.Server/Controllers/**/*.cs",
  "check": [
    {
      "pattern": "private\\s+readonly\\s+I\\w+AppService",
      "message": "Los controladores deben inyectar servicios a través de sus interfaces",
      "severity": "error",
      "required": true
    },
    {
      "notPattern": "\\w+\\s+=\\s+new\\s+\\w+\\(",
      "message": "Los controladores no deben crear instancias de clases concretas, usa inyección de dependencias",
      "severity": "error"
    },
    {
      "notPattern": "Domain\\.Models",
      "message": "Los controladores no deben usar entidades de dominio directamente, usa DTOs",
      "severity": "error"
    }
  ]
}
```

Estas reglas proporcionan una base sólida para implementar arquitecturas DDD en nuevos proyectos, asegurando que se sigan las mejores prácticas y patrones observados en el proyecto WF.Mimetic. Pueden ser adaptadas según las necesidades específicas de cada proyecto. 